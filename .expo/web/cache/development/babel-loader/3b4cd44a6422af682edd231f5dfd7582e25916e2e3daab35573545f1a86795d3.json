{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport ReactNativeBiometrics, { BiometryTypes } from 'react-native-biometrics';\nimport * as SecureStore from 'expo-secure-store';\nimport * as Haptics from 'expo-haptics';\nexport var BiometricService = function () {\n  function BiometricService() {\n    _classCallCheck(this, BiometricService);\n    this.config = {\n      isEnabled: false,\n      type: 'none',\n      quickPayLimit: '10000000',\n      timeout: 30000\n    };\n    this.rnBiometrics = new ReactNativeBiometrics();\n  }\n  return _createClass(BiometricService, [{\n    key: \"checkBiometricSupport\",\n    value: (function () {\n      var _checkBiometricSupport = _asyncToGenerator(function* () {\n        try {\n          var _yield$this$rnBiometr = yield this.rnBiometrics.isSensorAvailable(),\n            available = _yield$this$rnBiometr.available,\n            biometryType = _yield$this$rnBiometr.biometryType;\n          if (available) {\n            var type = 'none';\n            if (biometryType === BiometryTypes.TouchID || biometryType === BiometryTypes.Biometrics) {\n              type = 'fingerprint';\n            } else if (biometryType === BiometryTypes.FaceID) {\n              type = 'face';\n            }\n            return {\n              isAvailable: true,\n              type: type\n            };\n          }\n          return {\n            isAvailable: false,\n            type: 'none'\n          };\n        } catch (error) {\n          console.error('Biometric check failed:', error);\n          return {\n            isAvailable: false,\n            type: 'none'\n          };\n        }\n      });\n      function checkBiometricSupport() {\n        return _checkBiometricSupport.apply(this, arguments);\n      }\n      return checkBiometricSupport;\n    }())\n  }, {\n    key: \"setupBiometric\",\n    value: (function () {\n      var _setupBiometric = _asyncToGenerator(function* () {\n        try {\n          var _yield$this$rnBiometr2 = yield this.rnBiometrics.isSensorAvailable(),\n            available = _yield$this$rnBiometr2.available;\n          if (!available) {\n            return {\n              success: false,\n              error: 'Biometric authentication not available'\n            };\n          }\n          var _yield$this$rnBiometr3 = yield this.rnBiometrics.simplePrompt({\n              promptMessage: 'Authenticate to enable biometric login',\n              cancelButtonText: 'Cancel'\n            }),\n            success = _yield$this$rnBiometr3.success;\n          if (success) {\n            this.config.isEnabled = true;\n            yield this.saveBiometricConfig();\n            return {\n              success: true\n            };\n          } else {\n            return {\n              success: false,\n              error: 'Authentication failed'\n            };\n          }\n        } catch (error) {\n          console.error('Biometric setup failed:', error);\n          return {\n            success: false,\n            error: 'Setup failed'\n          };\n        }\n      });\n      function setupBiometric() {\n        return _setupBiometric.apply(this, arguments);\n      }\n      return setupBiometric;\n    }())\n  }, {\n    key: \"authenticateWithBiometric\",\n    value: (function () {\n      var _authenticateWithBiometric = _asyncToGenerator(function* (reason) {\n        try {\n          if (!this.config.isEnabled) {\n            return {\n              success: false,\n              error: 'Biometric authentication not enabled'\n            };\n          }\n          var _yield$this$rnBiometr4 = yield this.rnBiometrics.simplePrompt({\n              promptMessage: reason,\n              cancelButtonText: 'Cancel'\n            }),\n            success = _yield$this$rnBiometr4.success;\n          if (success) {\n            yield Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success);\n            return {\n              success: true\n            };\n          } else {\n            return {\n              success: false,\n              error: 'Authentication cancelled'\n            };\n          }\n        } catch (error) {\n          console.error('Biometric authentication error:', error);\n          return {\n            success: false,\n            error: 'Authentication failed'\n          };\n        }\n      });\n      function authenticateWithBiometric(_x) {\n        return _authenticateWithBiometric.apply(this, arguments);\n      }\n      return authenticateWithBiometric;\n    }())\n  }, {\n    key: \"authenticateQuickPay\",\n    value: (function () {\n      var _authenticateQuickPay = _asyncToGenerator(function* (amount, quickPayLimit) {\n        try {\n          var amountNum = parseFloat(amount);\n          var limitNum = parseFloat(quickPayLimit);\n          if (amountNum <= limitNum) {\n            var result = yield this.authenticateWithBiometric(`Quick Pay ${amount} ADA`);\n            return _objectSpread(_objectSpread({}, result), {}, {\n              requireFullAuth: false\n            });\n          } else {\n            return {\n              success: false,\n              requireFullAuth: true,\n              error: 'Amount exceeds quick pay limit'\n            };\n          }\n        } catch (error) {\n          console.error('Quick pay authentication error:', error);\n          return {\n            success: false,\n            requireFullAuth: true,\n            error: 'Quick pay failed'\n          };\n        }\n      });\n      function authenticateQuickPay(_x2, _x3) {\n        return _authenticateQuickPay.apply(this, arguments);\n      }\n      return authenticateQuickPay;\n    }())\n  }, {\n    key: \"getBiometricConfig\",\n    value: (function () {\n      var _getBiometricConfig = _asyncToGenerator(function* () {\n        try {\n          var stored = yield SecureStore.getItemAsync('biometric_config');\n          if (stored) {\n            this.config = _objectSpread(_objectSpread({}, this.config), JSON.parse(stored));\n          }\n          return this.config;\n        } catch (error) {\n          console.error('Failed to get biometric config:', error);\n          return this.config;\n        }\n      });\n      function getBiometricConfig() {\n        return _getBiometricConfig.apply(this, arguments);\n      }\n      return getBiometricConfig;\n    }())\n  }, {\n    key: \"updateBiometricConfig\",\n    value: (function () {\n      var _updateBiometricConfig = _asyncToGenerator(function* (updates) {\n        try {\n          this.config = _objectSpread(_objectSpread({}, this.config), updates);\n          yield this.saveBiometricConfig();\n        } catch (error) {\n          console.error('Failed to update biometric config:', error);\n        }\n      });\n      function updateBiometricConfig(_x4) {\n        return _updateBiometricConfig.apply(this, arguments);\n      }\n      return updateBiometricConfig;\n    }())\n  }, {\n    key: \"disableBiometric\",\n    value: (function () {\n      var _disableBiometric = _asyncToGenerator(function* () {\n        try {\n          this.config.isEnabled = false;\n          yield this.saveBiometricConfig();\n        } catch (error) {\n          console.error('Failed to disable biometric:', error);\n        }\n      });\n      function disableBiometric() {\n        return _disableBiometric.apply(this, arguments);\n      }\n      return disableBiometric;\n    }())\n  }, {\n    key: \"saveBiometricConfig\",\n    value: (function () {\n      var _saveBiometricConfig = _asyncToGenerator(function* () {\n        try {\n          yield SecureStore.setItemAsync('biometric_config', JSON.stringify(this.config));\n        } catch (error) {\n          console.error('Failed to save biometric config:', error);\n        }\n      });\n      function saveBiometricConfig() {\n        return _saveBiometricConfig.apply(this, arguments);\n      }\n      return saveBiometricConfig;\n    }())\n  }], [{\n    key: \"getInstance\",\n    value: function getInstance() {\n      if (!BiometricService.instance) {\n        BiometricService.instance = new BiometricService();\n      }\n      return BiometricService.instance;\n    }\n  }]);\n}();","map":{"version":3,"names":["ReactNativeBiometrics","BiometryTypes","SecureStore","Haptics","BiometricService","_classCallCheck","config","isEnabled","type","quickPayLimit","timeout","rnBiometrics","_createClass","key","value","_checkBiometricSupport","_asyncToGenerator","_yield$this$rnBiometr","isSensorAvailable","available","biometryType","TouchID","Biometrics","FaceID","isAvailable","error","console","checkBiometricSupport","apply","arguments","_setupBiometric","_yield$this$rnBiometr2","success","_yield$this$rnBiometr3","simplePrompt","promptMessage","cancelButtonText","saveBiometricConfig","setupBiometric","_authenticateWithBiometric","reason","_yield$this$rnBiometr4","notificationAsync","NotificationFeedbackType","Success","authenticateWithBiometric","_x","_authenticateQuickPay","amount","amountNum","parseFloat","limitNum","result","_objectSpread","requireFullAuth","authenticateQuickPay","_x2","_x3","_getBiometricConfig","stored","getItemAsync","JSON","parse","getBiometricConfig","_updateBiometricConfig","updates","updateBiometricConfig","_x4","_disableBiometric","disableBiometric","_saveBiometricConfig","setItemAsync","stringify","getInstance","instance"],"sources":["/Users/sonson/Documents/code/venera/X150-Valkyrie/src/services/BiometricService.ts"],"sourcesContent":["import ReactNativeBiometrics, { BiometryTypes } from 'react-native-biometrics';\nimport { EncryptedMnemonic } from '../types/wallet';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport * as SecureStore from 'expo-secure-store';\nimport * as Haptics from 'expo-haptics';\n\nexport interface BiometricConfig {\n    isEnabled: boolean;\n    type: 'fingerprint' | 'face' | 'none';\n    quickPayLimit: string;\n    timeout: number;\n}\n\nexport class BiometricService {\n    private static instance: BiometricService;\n    private config: BiometricConfig;\n    private rnBiometrics: ReactNativeBiometrics;\n\n    private constructor() {\n        this.config = {\n            isEnabled: false,\n            type: 'none',\n            quickPayLimit: '10000000', // 10 ADA\n            timeout: 30000, // 30 seconds\n        };\n        this.rnBiometrics = new ReactNativeBiometrics();\n    }\n\n    public static getInstance(): BiometricService {\n        if (!BiometricService.instance) {\n            BiometricService.instance = new BiometricService();\n        }\n        return BiometricService.instance;\n    }\n\n    /**\n     * Kiểm tra hỗ trợ sinh trắc học\n     */\n    async checkBiometricSupport(): Promise<{\n        isAvailable: boolean;\n        type: 'fingerprint' | 'face' | 'none';\n    }> {\n        try {\n            const { available, biometryType } = await this.rnBiometrics.isSensorAvailable();\n\n            if (available) {\n                let type: 'fingerprint' | 'face' | 'none' = 'none';\n\n                if (biometryType === BiometryTypes.TouchID || biometryType === BiometryTypes.Biometrics) {\n                    type = 'fingerprint';\n                } else if (biometryType === BiometryTypes.FaceID) {\n                    type = 'face';\n                }\n\n                return { isAvailable: true, type };\n            }\n\n            return { isAvailable: false, type: 'none' };\n        } catch (error) {\n            console.error('Biometric check failed:', error);\n            return { isAvailable: false, type: 'none' };\n        }\n    }\n\n    /**\n     * Thiết lập sinh trắc học\n     */\n    async setupBiometric(): Promise<{ success: boolean; error?: string }> {\n        try {\n            const { available } = await this.rnBiometrics.isSensorAvailable();\n\n            if (!available) {\n                return { success: false, error: 'Biometric authentication not available' };\n            }\n\n            // Test authentication\n            const { success } = await this.rnBiometrics.simplePrompt({\n                promptMessage: 'Authenticate to enable biometric login',\n                cancelButtonText: 'Cancel'\n            });\n\n            if (success) {\n                this.config.isEnabled = true;\n                await this.saveBiometricConfig();\n                return { success: true };\n            } else {\n                return { success: false, error: 'Authentication failed' };\n            }\n        } catch (error) {\n            console.error('Biometric setup failed:', error);\n            return { success: false, error: 'Setup failed' };\n        }\n    }\n\n    /**\n     * Xác thực sinh trắc học\n     */\n    async authenticateWithBiometric(reason: string): Promise<{ success: boolean; error?: string }> {\n        try {\n            if (!this.config.isEnabled) {\n                return { success: false, error: 'Biometric authentication not enabled' };\n            }\n\n            const { success } = await this.rnBiometrics.simplePrompt({\n                promptMessage: reason,\n                cancelButtonText: 'Cancel'\n            });\n\n            if (success) {\n                await Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success);\n                return { success: true };\n            } else {\n                return { success: false, error: 'Authentication cancelled' };\n            }\n        } catch (error) {\n            console.error('Biometric authentication error:', error);\n            return { success: false, error: 'Authentication failed' };\n        }\n    }\n\n    /**\n     * Quick Pay với sinh trắc học\n     */\n    async authenticateQuickPay(amount: string, quickPayLimit: string): Promise<{\n        success: boolean;\n        requireFullAuth: boolean;\n        error?: string;\n    }> {\n        try {\n            const amountNum = parseFloat(amount);\n            const limitNum = parseFloat(quickPayLimit);\n\n            if (amountNum <= limitNum) {\n                // Quick authentication for small amounts\n                const result = await this.authenticateWithBiometric(`Quick Pay ${amount} ADA`);\n                return { ...result, requireFullAuth: false };\n            } else {\n                // Full authentication required for large amounts\n                return { success: false, requireFullAuth: true, error: 'Amount exceeds quick pay limit' };\n            }\n        } catch (error) {\n            console.error('Quick pay authentication error:', error);\n            return { success: false, requireFullAuth: true, error: 'Quick pay failed' };\n        }\n    }\n\n    /**\n     * Lấy cấu hình sinh trắc học\n     */\n    async getBiometricConfig(): Promise<BiometricConfig> {\n        try {\n            const stored = await SecureStore.getItemAsync('biometric_config');\n            if (stored) {\n                this.config = { ...this.config, ...JSON.parse(stored) };\n            }\n            return this.config;\n        } catch (error) {\n            console.error('Failed to get biometric config:', error);\n            return this.config;\n        }\n    }\n\n    /**\n     * Cập nhật cấu hình sinh trắc học\n     */\n    async updateBiometricConfig(updates: Partial<BiometricConfig>): Promise<void> {\n        try {\n            this.config = { ...this.config, ...updates };\n            await this.saveBiometricConfig();\n        } catch (error) {\n            console.error('Failed to update biometric config:', error);\n        }\n    }\n\n    /**\n     * Vô hiệu hóa sinh trắc học\n     */\n    async disableBiometric(): Promise<void> {\n        try {\n            this.config.isEnabled = false;\n            await this.saveBiometricConfig();\n        } catch (error) {\n            console.error('Failed to disable biometric:', error);\n        }\n    }\n\n    /**\n     * Lưu cấu hình vào secure storage\n     */\n    private async saveBiometricConfig(): Promise<void> {\n        try {\n            await SecureStore.setItemAsync('biometric_config', JSON.stringify(this.config));\n        } catch (error) {\n            console.error('Failed to save biometric config:', error);\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}