{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { TransactionStatus } from \"../types/wallet\";\nimport { STORAGE_KEYS } from \"../constants/index\";\nimport { CardanoWalletService } from \"./CardanoWalletService\";\nimport { NetworkService } from \"./NetworkService\";\nexport var OfflineTransactionService = function () {\n  function OfflineTransactionService() {\n    _classCallCheck(this, OfflineTransactionService);\n    this.offlineQueue = [];\n    this.walletService = CardanoWalletService.getInstance();\n  }\n  return _createClass(OfflineTransactionService, [{\n    key: \"initialize\",\n    value: (function () {\n      var _initialize = _asyncToGenerator(function* () {\n        try {\n          yield this.loadOfflineQueue();\n          this.startAutoSync();\n          console.log('Offline transaction service initialized');\n          return true;\n        } catch (error) {\n          console.error('Failed to initialize offline service:', error);\n          return false;\n        }\n      });\n      function initialize() {\n        return _initialize.apply(this, arguments);\n      }\n      return initialize;\n    }())\n  }, {\n    key: \"createOfflineTransaction\",\n    value: (function () {\n      var _createOfflineTransaction = _asyncToGenerator(function* (fromAddress, toAddress, amount) {\n        var accountIndex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n        var metadata = arguments.length > 4 ? arguments[4] : undefined;\n        try {\n          var transaction = yield this.walletService.buildTransaction(fromAddress, toAddress, amount, metadata);\n          transaction.isOffline = true;\n          transaction.status = TransactionStatus.OFFLINE_SIGNED;\n          var signedTx = yield this.walletService.signTransaction(transaction, accountIndex);\n          yield this.addToOfflineQueue(transaction);\n          console.log('Offline transaction created:', transaction.id);\n          return {\n            transaction: transaction,\n            signedTx: signedTx\n          };\n        } catch (error) {\n          throw new Error(`Failed to create offline transaction: ${error}`);\n        }\n      });\n      function createOfflineTransaction(_x, _x2, _x3) {\n        return _createOfflineTransaction.apply(this, arguments);\n      }\n      return createOfflineTransaction;\n    }())\n  }, {\n    key: \"addToOfflineQueue\",\n    value: (function () {\n      var _addToOfflineQueue = _asyncToGenerator(function* (transaction) {\n        try {\n          var existingIndex = this.offlineQueue.findIndex(function (tx) {\n            return tx.id === transaction.id;\n          });\n          if (existingIndex >= 0) {\n            this.offlineQueue[existingIndex] = transaction;\n          } else {\n            this.offlineQueue.push(transaction);\n          }\n          yield this.saveOfflineQueue();\n          console.log('Transaction added to offline queue:', transaction.id);\n          return true;\n        } catch (error) {\n          console.error('Failed to add transaction to queue:', error);\n          return false;\n        }\n      });\n      function addToOfflineQueue(_x4) {\n        return _addToOfflineQueue.apply(this, arguments);\n      }\n      return addToOfflineQueue;\n    }())\n  }, {\n    key: \"removeFromOfflineQueue\",\n    value: (function () {\n      var _removeFromOfflineQueue = _asyncToGenerator(function* (transactionId) {\n        try {\n          var initialLength = this.offlineQueue.length;\n          this.offlineQueue = this.offlineQueue.filter(function (tx) {\n            return tx.id !== transactionId;\n          });\n          if (this.offlineQueue.length < initialLength) {\n            yield this.saveOfflineQueue();\n            console.log('Transaction removed from offline queue:', transactionId);\n            return true;\n          }\n          return false;\n        } catch (error) {\n          console.error('Failed to remove transaction from queue:', error);\n          return false;\n        }\n      });\n      function removeFromOfflineQueue(_x5) {\n        return _removeFromOfflineQueue.apply(this, arguments);\n      }\n      return removeFromOfflineQueue;\n    }())\n  }, {\n    key: \"getOfflineQueue\",\n    value: function getOfflineQueue(status) {\n      if (status) {\n        return this.offlineQueue.filter(function (tx) {\n          return tx.status === status;\n        });\n      }\n      return _toConsumableArray(this.offlineQueue);\n    }\n  }, {\n    key: \"getPendingCount\",\n    value: function getPendingCount() {\n      return this.offlineQueue.filter(function (tx) {\n        return tx.status === TransactionStatus.OFFLINE_SIGNED || tx.status === TransactionStatus.QUEUED;\n      }).length;\n    }\n  }, {\n    key: \"hasTransactionsToSync\",\n    value: function hasTransactionsToSync() {\n      return this.offlineQueue.some(function (tx) {\n        return tx.status === TransactionStatus.OFFLINE_SIGNED || tx.status === TransactionStatus.QUEUED;\n      });\n    }\n  }, {\n    key: \"syncOfflineTransactions\",\n    value: (function () {\n      var _syncOfflineTransactions = _asyncToGenerator(function* (isOnline) {\n        if (!isOnline) {\n          return {\n            success: false,\n            synced: 0,\n            failed: 0,\n            errors: ['Network unavailable']\n          };\n        }\n        var result = {\n          success: true,\n          synced: 0,\n          failed: 0,\n          errors: []\n        };\n        try {\n          var transactionsToSync = this.getOfflineQueue(TransactionStatus.OFFLINE_SIGNED).concat(this.getOfflineQueue(TransactionStatus.QUEUED));\n          console.log(`Syncing ${transactionsToSync.length} offline transactions`);\n          for (var transaction of transactionsToSync) {\n            try {\n              transaction.status = TransactionStatus.PENDING;\n              yield this.addToOfflineQueue(transaction);\n              var txHash = yield this.walletService.submitTransaction(transaction.signedTx || '');\n              if (txHash) {\n                transaction.hash = txHash;\n                transaction.status = TransactionStatus.CONFIRMED;\n                transaction.isOffline = false;\n                yield this.removeFromOfflineQueue(transaction.id);\n                result.synced++;\n                console.log('Transaction synced successfully:', transaction.id, txHash);\n              } else {\n                throw new Error('Transaction submission returned no hash');\n              }\n            } catch (error) {\n              transaction.status = TransactionStatus.FAILED;\n              transaction.errorDetails = error instanceof Error ? error.message : String(error);\n              yield this.addToOfflineQueue(transaction);\n              result.failed++;\n              result.errors.push(`${transaction.id}: ${error}`);\n              console.error('Failed to sync transaction:', transaction.id, error);\n            }\n          }\n          result.success = result.failed === 0;\n        } catch (error) {\n          result.success = false;\n          result.errors.push(`Sync process failed: ${error}`);\n          console.error('Sync process failed:', error);\n        }\n        return result;\n      });\n      function syncOfflineTransactions(_x6) {\n        return _syncOfflineTransactions.apply(this, arguments);\n      }\n      return syncOfflineTransactions;\n    }())\n  }, {\n    key: \"retryTransaction\",\n    value: (function () {\n      var _retryTransaction = _asyncToGenerator(function* (transactionId) {\n        try {\n          var transaction = this.offlineQueue.find(function (tx) {\n            return tx.id === transactionId;\n          });\n          if (!transaction) {\n            throw new Error('Transaction not found in queue');\n          }\n          if (transaction.status !== TransactionStatus.FAILED) {\n            throw new Error('Only failed transactions can be retried');\n          }\n          transaction.status = TransactionStatus.QUEUED;\n          transaction.timestamp = new Date();\n          yield this.addToOfflineQueue(transaction);\n          console.log('Transaction marked for retry:', transactionId);\n          return true;\n        } catch (error) {\n          console.error('Failed to retry transaction:', error);\n          return false;\n        }\n      });\n      function retryTransaction(_x7) {\n        return _retryTransaction.apply(this, arguments);\n      }\n      return retryTransaction;\n    }())\n  }, {\n    key: \"clearFailedTransactions\",\n    value: (function () {\n      var _clearFailedTransactions = _asyncToGenerator(function* () {\n        try {\n          var initialLength = this.offlineQueue.length;\n          this.offlineQueue = this.offlineQueue.filter(function (tx) {\n            return tx.status !== TransactionStatus.FAILED;\n          });\n          if (this.offlineQueue.length < initialLength) {\n            yield this.saveOfflineQueue();\n            console.log('Failed transactions cleared');\n            return true;\n          }\n          return false;\n        } catch (error) {\n          console.error('Failed to clear failed transactions:', error);\n          return false;\n        }\n      });\n      function clearFailedTransactions() {\n        return _clearFailedTransactions.apply(this, arguments);\n      }\n      return clearFailedTransactions;\n    }())\n  }, {\n    key: \"loadOfflineQueue\",\n    value: (function () {\n      var _loadOfflineQueue = _asyncToGenerator(function* () {\n        try {\n          var queueData = yield AsyncStorage.getItem(STORAGE_KEYS.OFFLINE_QUEUE);\n          if (queueData) {\n            var parsedQueue = JSON.parse(queueData);\n            this.offlineQueue = parsedQueue.map(function (tx) {\n              return _objectSpread(_objectSpread({}, tx), {}, {\n                timestamp: new Date(tx.timestamp)\n              });\n            });\n            console.log(`Loaded ${this.offlineQueue.length} transactions from offline queue`);\n          }\n          return true;\n        } catch (error) {\n          console.error('Failed to load offline queue:', error);\n          this.offlineQueue = [];\n          return false;\n        }\n      });\n      function loadOfflineQueue() {\n        return _loadOfflineQueue.apply(this, arguments);\n      }\n      return loadOfflineQueue;\n    }())\n  }, {\n    key: \"saveOfflineQueue\",\n    value: (function () {\n      var _saveOfflineQueue = _asyncToGenerator(function* () {\n        try {\n          yield AsyncStorage.setItem(STORAGE_KEYS.OFFLINE_QUEUE, JSON.stringify(this.offlineQueue));\n          return true;\n        } catch (error) {\n          console.error('Failed to save offline queue:', error);\n          return false;\n        }\n      });\n      function saveOfflineQueue() {\n        return _saveOfflineQueue.apply(this, arguments);\n      }\n      return saveOfflineQueue;\n    }())\n  }, {\n    key: \"startAutoSync\",\n    value: function startAutoSync() {\n      var _this = this;\n      var interval = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 30000;\n      if (this.syncInterval) {\n        clearInterval(this.syncInterval);\n      }\n      this.syncInterval = setInterval(_asyncToGenerator(function* () {\n        if (_this.hasTransactionsToSync()) {\n          try {\n            var networkService = NetworkService.getInstance();\n            var isOnline = networkService.isOnline();\n            if (isOnline) {\n              yield _this.syncOfflineTransactions(isOnline);\n            }\n          } catch (error) {\n            console.error('Failed to check network status:', error);\n          }\n        }\n      }), interval);\n    }\n  }, {\n    key: \"stopAutoSync\",\n    value: function stopAutoSync() {\n      if (this.syncInterval) {\n        clearInterval(this.syncInterval);\n        this.syncInterval = undefined;\n      }\n    }\n  }, {\n    key: \"cleanup\",\n    value: (function () {\n      var _cleanup = _asyncToGenerator(function* () {\n        try {\n          this.stopAutoSync();\n          yield this.saveOfflineQueue();\n          console.log('Offline transaction service cleaned up');\n          return true;\n        } catch (error) {\n          console.error('Failed to cleanup offline service:', error);\n          return false;\n        }\n      });\n      function cleanup() {\n        return _cleanup.apply(this, arguments);\n      }\n      return cleanup;\n    }())\n  }], [{\n    key: \"getInstance\",\n    value: function getInstance() {\n      if (!OfflineTransactionService.instance) {\n        OfflineTransactionService.instance = new OfflineTransactionService();\n      }\n      return OfflineTransactionService.instance;\n    }\n  }]);\n}();","map":{"version":3,"names":["AsyncStorage","TransactionStatus","STORAGE_KEYS","CardanoWalletService","NetworkService","OfflineTransactionService","_classCallCheck","offlineQueue","walletService","getInstance","_createClass","key","value","_initialize","_asyncToGenerator","loadOfflineQueue","startAutoSync","console","log","error","initialize","apply","arguments","_createOfflineTransaction","fromAddress","toAddress","amount","accountIndex","length","undefined","metadata","transaction","buildTransaction","isOffline","status","OFFLINE_SIGNED","signedTx","signTransaction","addToOfflineQueue","id","Error","createOfflineTransaction","_x","_x2","_x3","_addToOfflineQueue","existingIndex","findIndex","tx","push","saveOfflineQueue","_x4","_removeFromOfflineQueue","transactionId","initialLength","filter","removeFromOfflineQueue","_x5","getOfflineQueue","_toConsumableArray","getPendingCount","QUEUED","hasTransactionsToSync","some","_syncOfflineTransactions","isOnline","success","synced","failed","errors","result","transactionsToSync","concat","PENDING","txHash","submitTransaction","hash","CONFIRMED","FAILED","errorDetails","message","String","syncOfflineTransactions","_x6","_retryTransaction","find","timestamp","Date","retryTransaction","_x7","_clearFailedTransactions","clearFailedTransactions","_loadOfflineQueue","queueData","getItem","OFFLINE_QUEUE","parsedQueue","JSON","parse","map","_objectSpread","_saveOfflineQueue","setItem","stringify","_this","interval","syncInterval","clearInterval","setInterval","networkService","stopAutoSync","_cleanup","cleanup","instance"],"sources":["/Users/sonson/Documents/code/venera/X150-Valkyrie/src/services/OfflineTransactionService.ts"],"sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage';\nimport { Transaction, TransactionStatus } from '../types/wallet';\nimport { STORAGE_KEYS } from '../constants/index';\nimport { CardanoWalletService } from './CardanoWalletService';\nimport { NetworkService } from './NetworkService';\nimport { ErrorHandler, ErrorType, ErrorSeverity } from './ErrorHandler';\n\n/**\n * Service quản lý giao dịch offline và hàng chờ\n * Xử lý ký transaction offline, lưu vào queue và sync khi có mạng\n */\nexport class OfflineTransactionService {\n    private static instance: OfflineTransactionService;\n    private offlineQueue: Transaction[] = [];\n    private walletService: CardanoWalletService;\n    private syncInterval?: NodeJS.Timeout;\n\n    constructor() {\n        this.walletService = CardanoWalletService.getInstance();\n    }\n\n    static getInstance(): OfflineTransactionService {\n        if (!OfflineTransactionService.instance) {\n            OfflineTransactionService.instance = new OfflineTransactionService();\n        }\n        return OfflineTransactionService.instance;\n    }\n\n    /**\n     * Khởi tạo service và load offline queue\n     * @returns Success status\n     */\n    async initialize(): Promise<boolean> {\n        try {\n            await this.loadOfflineQueue();\n            this.startAutoSync();\n\n            console.log('Offline transaction service initialized');\n            return true;\n\n        } catch (error) {\n            console.error('Failed to initialize offline service:', error);\n            return false;\n        }\n    }\n\n    /**\n     * Tạo và ký transaction offline\n     * @param fromAddress - Địa chỉ gửi\n     * @param toAddress - Địa chỉ nhận\n     * @param amount - Số lượng ADA (lovelace)\n     * @param accountIndex - Index của account\n     * @param metadata - Metadata tùy chọn\n     * @returns Signed transaction\n     */\n    async createOfflineTransaction(\n        fromAddress: string,\n        toAddress: string,\n        amount: string,\n        accountIndex: number = 0,\n        metadata?: any\n    ): Promise<{ transaction: Transaction; signedTx: string }> {\n        try {\n            // Tạo transaction\n            const transaction = await this.walletService.buildTransaction(\n                fromAddress,\n                toAddress,\n                amount,\n                metadata\n            );\n\n            // Mark as offline\n            transaction.isOffline = true;\n            transaction.status = TransactionStatus.OFFLINE_SIGNED;\n\n            // Ký transaction offline\n            const signedTx = await this.walletService.signTransaction(transaction, accountIndex);\n\n            // Thêm vào offline queue\n            await this.addToOfflineQueue(transaction);\n\n            console.log('Offline transaction created:', transaction.id);\n\n            return { transaction, signedTx };\n\n        } catch (error) {\n            throw new Error(`Failed to create offline transaction: ${error}`);\n        }\n    }\n\n    /**\n     * Thêm transaction vào offline queue\n     * @param transaction - Transaction cần thêm\n     * @returns Success status\n     */\n    async addToOfflineQueue(transaction: Transaction): Promise<boolean> {\n        try {\n            // Kiểm tra duplicate\n            const existingIndex = this.offlineQueue.findIndex(tx => tx.id === transaction.id);\n\n            if (existingIndex >= 0) {\n                // Update existing transaction\n                this.offlineQueue[existingIndex] = transaction;\n            } else {\n                // Add new transaction\n                this.offlineQueue.push(transaction);\n            }\n\n            // Save to storage\n            await this.saveOfflineQueue();\n\n            console.log('Transaction added to offline queue:', transaction.id);\n            return true;\n\n        } catch (error) {\n            console.error('Failed to add transaction to queue:', error);\n            return false;\n        }\n    }\n\n    /**\n     * Xóa transaction khỏi offline queue\n     * @param transactionId - ID của transaction\n     * @returns Success status\n     */\n    async removeFromOfflineQueue(transactionId: string): Promise<boolean> {\n        try {\n            const initialLength = this.offlineQueue.length;\n            this.offlineQueue = this.offlineQueue.filter(tx => tx.id !== transactionId);\n\n            if (this.offlineQueue.length < initialLength) {\n                await this.saveOfflineQueue();\n                console.log('Transaction removed from offline queue:', transactionId);\n                return true;\n            }\n\n            return false;\n\n        } catch (error) {\n            console.error('Failed to remove transaction from queue:', error);\n            return false;\n        }\n    }\n\n    /**\n     * Lấy danh sách transaction trong offline queue\n     * @param status - Filter theo status (tùy chọn)\n     * @returns Danh sách transactions\n     */\n    getOfflineQueue(status?: TransactionStatus): Transaction[] {\n        if (status) {\n            return this.offlineQueue.filter(tx => tx.status === status);\n        }\n\n        return [...this.offlineQueue];\n    }\n\n    /**\n     * Đếm số transaction pending trong queue\n     * @returns Số lượng pending transactions\n     */\n    getPendingCount(): number {\n        return this.offlineQueue.filter(tx =>\n            tx.status === TransactionStatus.OFFLINE_SIGNED ||\n            tx.status === TransactionStatus.QUEUED\n        ).length;\n    }\n\n    /**\n     * Kiểm tra có transaction nào ready để sync không\n     * @returns true nếu có transaction ready\n     */\n    hasTransactionsToSync(): boolean {\n        return this.offlineQueue.some(tx =>\n            tx.status === TransactionStatus.OFFLINE_SIGNED ||\n            tx.status === TransactionStatus.QUEUED\n        );\n    }\n\n    /**\n     * Sync offline transactions khi có mạng\n     * @param isOnline - Network status\n     * @returns Sync result\n     */\n    async syncOfflineTransactions(isOnline: boolean): Promise<{\n        success: boolean;\n        synced: number;\n        failed: number;\n        errors: string[];\n    }> {\n        if (!isOnline) {\n            return { success: false, synced: 0, failed: 0, errors: ['Network unavailable'] };\n        }\n\n        const result = {\n            success: true,\n            synced: 0,\n            failed: 0,\n            errors: [] as string[]\n        };\n\n        try {\n            const transactionsToSync = this.getOfflineQueue(TransactionStatus.OFFLINE_SIGNED)\n                .concat(this.getOfflineQueue(TransactionStatus.QUEUED));\n\n            console.log(`Syncing ${transactionsToSync.length} offline transactions`);\n\n            for (const transaction of transactionsToSync) {\n                try {\n                    // Mark as pending while submitting\n                    transaction.status = TransactionStatus.PENDING;\n                    await this.addToOfflineQueue(transaction);\n\n                    // Submit transaction to network\n                    const txHash = await this.walletService.submitTransaction(transaction.signedTx || '');\n\n                    if (txHash) {\n                        // Update transaction with hash and confirm\n                        transaction.hash = txHash;\n                        transaction.status = TransactionStatus.CONFIRMED;\n                        transaction.isOffline = false;\n\n                        // Remove from offline queue\n                        await this.removeFromOfflineQueue(transaction.id);\n\n                        result.synced++;\n                        console.log('Transaction synced successfully:', transaction.id, txHash);\n                    } else {\n                        throw new Error('Transaction submission returned no hash');\n                    }\n\n                } catch (error) {\n                    transaction.status = TransactionStatus.FAILED;\n                    transaction.errorDetails = error instanceof Error ? error.message : String(error);\n                    await this.addToOfflineQueue(transaction);\n\n                    result.failed++;\n                    result.errors.push(`${transaction.id}: ${error}`);\n                    console.error('Failed to sync transaction:', transaction.id, error);\n                }\n            }\n\n            result.success = result.failed === 0;\n\n        } catch (error) {\n            result.success = false;\n            result.errors.push(`Sync process failed: ${error}`);\n            console.error('Sync process failed:', error);\n        }\n\n        return result;\n    }\n\n    /**\n     * Retry failed transaction\n     * @param transactionId - ID của transaction\n     * @returns Success status\n     */\n    async retryTransaction(transactionId: string): Promise<boolean> {\n        try {\n            const transaction = this.offlineQueue.find(tx => tx.id === transactionId);\n\n            if (!transaction) {\n                throw new Error('Transaction not found in queue');\n            }\n\n            if (transaction.status !== TransactionStatus.FAILED) {\n                throw new Error('Only failed transactions can be retried');\n            }\n\n            // Reset status to queued for retry\n            transaction.status = TransactionStatus.QUEUED;\n            transaction.timestamp = new Date(); // Update timestamp\n\n            await this.addToOfflineQueue(transaction);\n\n            console.log('Transaction marked for retry:', transactionId);\n            return true;\n\n        } catch (error) {\n            console.error('Failed to retry transaction:', error);\n            return false;\n        }\n    }\n\n    /**\n     * Clear failed transactions\n     * @returns Success status\n     */\n    async clearFailedTransactions(): Promise<boolean> {\n        try {\n            const initialLength = this.offlineQueue.length;\n            this.offlineQueue = this.offlineQueue.filter(tx => tx.status !== TransactionStatus.FAILED);\n\n            if (this.offlineQueue.length < initialLength) {\n                await this.saveOfflineQueue();\n                console.log('Failed transactions cleared');\n                return true;\n            }\n\n            return false;\n\n        } catch (error) {\n            console.error('Failed to clear failed transactions:', error);\n            return false;\n        }\n    }\n\n    /**\n     * Load offline queue từ storage\n     * @returns Success status\n     */\n    private async loadOfflineQueue(): Promise<boolean> {\n        try {\n            const queueData = await AsyncStorage.getItem(STORAGE_KEYS.OFFLINE_QUEUE);\n\n            if (queueData) {\n                const parsedQueue = JSON.parse(queueData);\n\n                // Convert date strings back to Date objects\n                this.offlineQueue = parsedQueue.map((tx: any) => ({\n                    ...tx,\n                    timestamp: new Date(tx.timestamp)\n                }));\n\n                console.log(`Loaded ${this.offlineQueue.length} transactions from offline queue`);\n            }\n\n            return true;\n\n        } catch (error) {\n            console.error('Failed to load offline queue:', error);\n            this.offlineQueue = [];\n            return false;\n        }\n    }\n\n    /**\n     * Save offline queue to storage\n     * @returns Success status\n     */\n    private async saveOfflineQueue(): Promise<boolean> {\n        try {\n            await AsyncStorage.setItem(\n                STORAGE_KEYS.OFFLINE_QUEUE,\n                JSON.stringify(this.offlineQueue)\n            );\n\n            return true;\n\n        } catch (error) {\n            console.error('Failed to save offline queue:', error);\n            return false;\n        }\n    }\n\n    /**\n     * Bắt đầu auto sync transactions\n     * @param interval - Sync interval (ms)\n     */\n    private startAutoSync(interval: number = 30000): void {\n        if (this.syncInterval) {\n            clearInterval(this.syncInterval);\n        }\n\n        this.syncInterval = setInterval(async () => {\n            if (this.hasTransactionsToSync()) {\n                // Check actual network status\n                try {\n                    const networkService = NetworkService.getInstance();\n                    const isOnline = networkService.isOnline();\n\n                    if (isOnline) {\n                        await this.syncOfflineTransactions(isOnline);\n                    }\n                } catch (error) {\n                    console.error('Failed to check network status:', error);\n                }\n            }\n        }, interval);\n    }\n\n    /**\n     * Dừng auto sync\n     */\n    stopAutoSync(): void {\n        if (this.syncInterval) {\n            clearInterval(this.syncInterval);\n            this.syncInterval = undefined;\n        }\n    }\n\n    /**\n     * Cleanup service\n     * @returns Success status\n     */\n    async cleanup(): Promise<boolean> {\n        try {\n            this.stopAutoSync();\n            await this.saveOfflineQueue();\n\n            console.log('Offline transaction service cleaned up');\n            return true;\n\n        } catch (error) {\n            console.error('Failed to cleanup offline service:', error);\n            return false;\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}