{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nvar bridge = NativeModules.ReactNativeBiometrics;\nexport var TouchID = 'TouchID';\nexport var FaceID = 'FaceID';\nexport var Biometrics = 'Biometrics';\nexport var BiometryTypes = {\n  TouchID: TouchID,\n  FaceID: FaceID,\n  Biometrics: Biometrics\n};\nexport var ReactNativeBiometricsLegacy;\n(function (ReactNativeBiometricsLegacy) {\n  function isSensorAvailable() {\n    return new ReactNativeBiometrics().isSensorAvailable();\n  }\n  ReactNativeBiometricsLegacy.isSensorAvailable = isSensorAvailable;\n  function createKeys() {\n    return new ReactNativeBiometrics().createKeys();\n  }\n  ReactNativeBiometricsLegacy.createKeys = createKeys;\n  function biometricKeysExist() {\n    return new ReactNativeBiometrics().biometricKeysExist();\n  }\n  ReactNativeBiometricsLegacy.biometricKeysExist = biometricKeysExist;\n  function deleteKeys() {\n    return new ReactNativeBiometrics().deleteKeys();\n  }\n  ReactNativeBiometricsLegacy.deleteKeys = deleteKeys;\n  function createSignature(createSignatureOptions) {\n    return new ReactNativeBiometrics().createSignature(createSignatureOptions);\n  }\n  ReactNativeBiometricsLegacy.createSignature = createSignature;\n  function simplePrompt(simplePromptOptions) {\n    return new ReactNativeBiometrics().simplePrompt(simplePromptOptions);\n  }\n  ReactNativeBiometricsLegacy.simplePrompt = simplePrompt;\n})(ReactNativeBiometricsLegacy || (ReactNativeBiometricsLegacy = {}));\nvar ReactNativeBiometrics = function () {\n  function ReactNativeBiometrics(rnBiometricsOptions) {\n    var _a, _b;\n    this.allowDeviceCredentials = false;\n    var allowDeviceCredentials = (_b = (_a = rnBiometricsOptions) === null || _a === void 0 ? void 0 : _a.allowDeviceCredentials, _b !== null && _b !== void 0 ? _b : false);\n    this.allowDeviceCredentials = allowDeviceCredentials;\n  }\n  ReactNativeBiometrics.prototype.isSensorAvailable = function () {\n    return bridge.isSensorAvailable({\n      allowDeviceCredentials: this.allowDeviceCredentials\n    });\n  };\n  ReactNativeBiometrics.prototype.createKeys = function () {\n    return bridge.createKeys({\n      allowDeviceCredentials: this.allowDeviceCredentials\n    });\n  };\n  ReactNativeBiometrics.prototype.biometricKeysExist = function () {\n    return bridge.biometricKeysExist();\n  };\n  ReactNativeBiometrics.prototype.deleteKeys = function () {\n    return bridge.deleteKeys();\n  };\n  ReactNativeBiometrics.prototype.createSignature = function (createSignatureOptions) {\n    var _a;\n    createSignatureOptions.cancelButtonText = (_a = createSignatureOptions.cancelButtonText, _a !== null && _a !== void 0 ? _a : 'Cancel');\n    return bridge.createSignature(__assign({\n      allowDeviceCredentials: this.allowDeviceCredentials\n    }, createSignatureOptions));\n  };\n  ReactNativeBiometrics.prototype.simplePrompt = function (simplePromptOptions) {\n    var _a, _b;\n    simplePromptOptions.cancelButtonText = (_a = simplePromptOptions.cancelButtonText, _a !== null && _a !== void 0 ? _a : 'Cancel');\n    simplePromptOptions.fallbackPromptMessage = (_b = simplePromptOptions.fallbackPromptMessage, _b !== null && _b !== void 0 ? _b : 'Use Passcode');\n    return bridge.simplePrompt(__assign({\n      allowDeviceCredentials: this.allowDeviceCredentials\n    }, simplePromptOptions));\n  };\n  return ReactNativeBiometrics;\n}();\nexport default ReactNativeBiometrics;","map":{"version":3,"names":["bridge","NativeModules","ReactNativeBiometrics","TouchID","FaceID","Biometrics","BiometryTypes","ReactNativeBiometricsLegacy","isSensorAvailable","createKeys","biometricKeysExist","deleteKeys","createSignature","createSignatureOptions","simplePrompt","simplePromptOptions","rnBiometricsOptions","allowDeviceCredentials","_b","_a","prototype","cancelButtonText","__assign","fallbackPromptMessage"],"sources":["/Users/sonson/Documents/code/venera/X150-Valkyrie/node_modules/react-native-biometrics/index.ts"],"sourcesContent":["import { NativeModules } from 'react-native'\n\nconst { ReactNativeBiometrics: bridge } = NativeModules\n\n/**\n * Type alias for possible biometry types\n */\nexport type BiometryType = 'TouchID' | 'FaceID' | 'Biometrics'\n\ninterface RNBiometricsOptions {\n  allowDeviceCredentials?: boolean\n}\n\ninterface IsSensorAvailableResult {\n  available: boolean\n  biometryType?: BiometryType\n  error?: string\n}\n\ninterface CreateKeysResult {\n  publicKey: string\n}\n\ninterface BiometricKeysExistResult {\n  keysExist: boolean\n}\n\ninterface DeleteKeysResult {\n  keysDeleted: boolean\n}\n\ninterface CreateSignatureOptions {\n  promptMessage: string\n  payload: string\n  cancelButtonText?: string\n}\n\ninterface CreateSignatureResult {\n  success: boolean\n  signature?: string\n  error?: string\n}\n\ninterface SimplePromptOptions {\n  promptMessage: string\n  fallbackPromptMessage?: string\n  cancelButtonText?: string\n}\n\ninterface SimplePromptResult {\n  success: boolean\n  error?: string\n}\n\n/**\n * Enum for touch id sensor type\n */\nexport const TouchID = 'TouchID'\n/**\n * Enum for face id sensor type\n */\nexport const FaceID = 'FaceID'\n/**\n * Enum for generic biometrics (this is the only value available on android)\n */\nexport const Biometrics = 'Biometrics'\n\nexport const BiometryTypes = {\n  TouchID,\n  FaceID,\n  Biometrics\n}\n\nexport module ReactNativeBiometricsLegacy {\n  /**\n   * Returns promise that resolves to an object with object.biometryType = Biometrics | TouchID | FaceID\n   * @returns {Promise<Object>} Promise that resolves to an object with details about biometrics available\n   */\n  export function isSensorAvailable(): Promise<IsSensorAvailableResult> {\n    return new ReactNativeBiometrics().isSensorAvailable()\n  }\n\n  /**\n   * Creates a public private key pair,returns promise that resolves to\n   * an object with object.publicKey, which is the public key of the newly generated key pair\n   * @returns {Promise<Object>}  Promise that resolves to object with details about the newly generated public key\n   */\n  export function createKeys(): Promise<CreateKeysResult> {\n    return new ReactNativeBiometrics().createKeys()\n  }\n\n  /**\n   * Returns promise that resolves to an object with object.keysExists = true | false\n   * indicating if the keys were found to exist or not\n   * @returns {Promise<Object>} Promise that resolves to object with details aobut the existence of keys\n   */\n  export function biometricKeysExist(): Promise<BiometricKeysExistResult> {\n    return new ReactNativeBiometrics().biometricKeysExist()\n  }\n\n  /**\n   * Returns promise that resolves to an object with true | false\n   * indicating if the keys were properly deleted\n   * @returns {Promise<Object>} Promise that resolves to an object with details about the deletion\n   */\n  export function deleteKeys(): Promise<DeleteKeysResult> {\n    return new ReactNativeBiometrics().deleteKeys()\n  }\n\n  /**\n   * Prompts user with biometrics dialog using the passed in prompt message and\n   * returns promise that resolves to an object with object.signature,\n   * which is cryptographic signature of the payload\n   * @param {Object} createSignatureOptions\n   * @param {string} createSignatureOptions.promptMessage\n   * @param {string} createSignatureOptions.payload\n   * @returns {Promise<Object>}  Promise that resolves to an object cryptographic signature details\n   */\n  export function createSignature(createSignatureOptions: CreateSignatureOptions): Promise<CreateSignatureResult> {\n    return new ReactNativeBiometrics().createSignature(createSignatureOptions)\n  }\n\n  /**\n   * Prompts user with biometrics dialog using the passed in prompt message and\n   * returns promise that resolves to an object with object.success = true if the user passes,\n   * object.success = false if the user cancels, and rejects if anything fails\n   * @param {Object} simplePromptOptions\n   * @param {string} simplePromptOptions.promptMessage\n   * @param {string} simplePromptOptions.fallbackPromptMessage\n   * @returns {Promise<Object>}  Promise that resolves an object with details about the biometrics result\n   */\n  export function simplePrompt(simplePromptOptions: SimplePromptOptions): Promise<SimplePromptResult> {\n    return new ReactNativeBiometrics().simplePrompt(simplePromptOptions)\n  }\n}\n\nexport default class ReactNativeBiometrics {\n    allowDeviceCredentials = false\n\n    /**\n     * @param {Object} rnBiometricsOptions\n     * @param {boolean} rnBiometricsOptions.allowDeviceCredentials\n     */\n    constructor(rnBiometricsOptions?: RNBiometricsOptions) {\n      const allowDeviceCredentials = rnBiometricsOptions?.allowDeviceCredentials ?? false\n      this.allowDeviceCredentials = allowDeviceCredentials\n    }\n\n    /**\n     * Returns promise that resolves to an object with object.biometryType = Biometrics | TouchID | FaceID\n     * @returns {Promise<Object>} Promise that resolves to an object with details about biometrics available\n     */\n    isSensorAvailable(): Promise<IsSensorAvailableResult> {\n      return bridge.isSensorAvailable({\n        allowDeviceCredentials: this.allowDeviceCredentials\n      })\n    }\n\n    /**\n     * Creates a public private key pair,returns promise that resolves to\n     * an object with object.publicKey, which is the public key of the newly generated key pair\n     * @returns {Promise<Object>}  Promise that resolves to object with details about the newly generated public key\n     */\n    createKeys(): Promise<CreateKeysResult> {\n      return bridge.createKeys({\n        allowDeviceCredentials: this.allowDeviceCredentials\n      })\n    }\n\n    /**\n     * Returns promise that resolves to an object with object.keysExists = true | false\n     * indicating if the keys were found to exist or not\n     * @returns {Promise<Object>} Promise that resolves to object with details aobut the existence of keys\n     */\n    biometricKeysExist(): Promise<BiometricKeysExistResult> {\n      return bridge.biometricKeysExist()\n    }\n\n    /**\n     * Returns promise that resolves to an object with true | false\n     * indicating if the keys were properly deleted\n     * @returns {Promise<Object>} Promise that resolves to an object with details about the deletion\n     */\n    deleteKeys(): Promise<DeleteKeysResult> {\n      return bridge.deleteKeys()\n    }\n\n    /**\n     * Prompts user with biometrics dialog using the passed in prompt message and\n     * returns promise that resolves to an object with object.signature,\n     * which is cryptographic signature of the payload\n     * @param {Object} createSignatureOptions\n     * @param {string} createSignatureOptions.promptMessage\n     * @param {string} createSignatureOptions.payload\n     * @returns {Promise<Object>}  Promise that resolves to an object cryptographic signature details\n     */\n    createSignature(createSignatureOptions: CreateSignatureOptions): Promise<CreateSignatureResult> {\n      createSignatureOptions.cancelButtonText = createSignatureOptions.cancelButtonText ?? 'Cancel'\n\n      return bridge.createSignature({\n        allowDeviceCredentials: this.allowDeviceCredentials,\n        ...createSignatureOptions\n      })\n    }\n\n    /**\n     * Prompts user with biometrics dialog using the passed in prompt message and\n     * returns promise that resolves to an object with object.success = true if the user passes,\n     * object.success = false if the user cancels, and rejects if anything fails\n     * @param {Object} simplePromptOptions\n     * @param {string} simplePromptOptions.promptMessage\n     * @param {string} simplePromptOptions.fallbackPromptMessage\n     * @returns {Promise<Object>}  Promise that resolves an object with details about the biometrics result\n     */\n    simplePrompt(simplePromptOptions: SimplePromptOptions): Promise<SimplePromptResult> {\n      simplePromptOptions.cancelButtonText = simplePromptOptions.cancelButtonText ?? 'Cancel'\n      simplePromptOptions.fallbackPromptMessage = simplePromptOptions.fallbackPromptMessage ?? 'Use Passcode'\n\n      return bridge.simplePrompt({\n        allowDeviceCredentials: this.allowDeviceCredentials,\n        ...simplePromptOptions\n      })\n    }\n  }\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}