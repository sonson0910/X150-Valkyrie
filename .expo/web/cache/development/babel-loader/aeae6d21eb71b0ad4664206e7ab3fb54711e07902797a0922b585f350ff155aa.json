{"ast":null,"code":"console.log('Loading Cardano web fix...');\nif (typeof window !== 'undefined') {\n  var originalBuffer = window.Buffer;\n  if (originalBuffer) {\n    originalBuffer.isBuffer = function (obj) {\n      return obj && (obj._isBuffer || obj instanceof originalBuffer);\n    };\n    if (originalBuffer.prototype) {\n      originalBuffer.prototype._isBuffer = true;\n    }\n    console.log('Window Buffer methods fixed');\n  }\n  if (window.navigator && window.navigator.mimeTypes) {\n    var mimeTypes = window.navigator.mimeTypes;\n    if (mimeTypes.getType) {\n      var originalGetType = mimeTypes.getType;\n      mimeTypes.getType = function (filename) {\n        try {\n          return originalGetType.call(this, filename) || 'application/octet-stream';\n        } catch (_unused) {\n          return 'application/octet-stream';\n        }\n      };\n      console.log('MIME types getType fixed');\n    }\n  }\n}\nif (typeof global !== 'undefined') {\n  var globalBuffer = global.Buffer;\n  if (globalBuffer) {\n    globalBuffer.isBuffer = function (obj) {\n      return obj && (obj._isBuffer || obj instanceof globalBuffer);\n    };\n    if (globalBuffer.prototype) {\n      globalBuffer.prototype._isBuffer = true;\n    }\n    console.log('Global Buffer methods fixed');\n  }\n}\nif (typeof window !== 'undefined') {\n  setTimeout(function () {\n    var cardanoLib = window.cardano_serialization_lib;\n    if (cardanoLib) {\n      console.log('Cardano serialization lib found, applying specific fixes...');\n      if (cardanoLib.Buffer) {\n        cardanoLib.Buffer.isBuffer = function (obj) {\n          return obj && (obj._isBuffer || obj instanceof Buffer);\n        };\n      }\n      if (cardanoLib.Buffer && cardanoLib.Buffer.prototype) {\n        cardanoLib.Buffer.prototype._isBuffer = true;\n      }\n    }\n  }, 1000);\n}\nif (typeof window !== 'undefined') {\n  var originalConsoleError = console.error;\n  console.error = function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    var message = args.join(' ');\n    if (message.includes('Could not find MIME for Buffer')) {\n      console.warn('MIME Buffer error caught and suppressed:', message);\n      return;\n    }\n    originalConsoleError.apply(console, args);\n  };\n  console.log('Console error override applied');\n}\nconsole.log('Cardano web fix loaded successfully');\nexport {};","map":{"version":3,"names":["console","log","window","originalBuffer","Buffer","isBuffer","obj","_isBuffer","prototype","navigator","mimeTypes","getType","originalGetType","filename","call","_unused","global","globalBuffer","setTimeout","cardanoLib","cardano_serialization_lib","originalConsoleError","error","_len","arguments","length","args","Array","_key","message","join","includes","warn","apply"],"sources":["/Users/sonson/Documents/code/venera/X150-Valkyrie/src/polyfills/cardano-web-fix.ts"],"sourcesContent":["// Cardano Web Fix for serialization lib\n\nconsole.log('Loading Cardano web fix...');\n\n// Fix for Cardano serialization lib Buffer issues\nif (typeof window !== 'undefined') {\n  // Override problematic Buffer methods\n  const originalBuffer = (window as any).Buffer;\n  if (originalBuffer) {\n    // Fix Buffer.isBuffer\n    originalBuffer.isBuffer = function (obj: any) {\n      return obj && (obj._isBuffer || obj instanceof originalBuffer);\n    };\n    \n    // Fix Buffer prototype\n    if (originalBuffer.prototype) {\n      originalBuffer.prototype._isBuffer = true;\n    }\n    console.log('Window Buffer methods fixed');\n  }\n  \n  // Fix MIME type detection\n  if ((window as any).navigator && (window as any).navigator.mimeTypes) {\n    const mimeTypes = (window as any).navigator.mimeTypes;\n    if (mimeTypes.getType) {\n      const originalGetType = mimeTypes.getType;\n      mimeTypes.getType = function (filename: string) {\n        try {\n          return originalGetType.call(this, filename) || 'application/octet-stream';\n        } catch {\n          return 'application/octet-stream';\n        }\n      };\n      console.log('MIME types getType fixed');\n    }\n  }\n}\n\n// Fix for global Buffer\nif (typeof global !== 'undefined') {\n  const globalBuffer = (global as any).Buffer;\n  if (globalBuffer) {\n    globalBuffer.isBuffer = function (obj: any) {\n      return obj && (obj._isBuffer || obj instanceof globalBuffer);\n    };\n    \n    if (globalBuffer.prototype) {\n      globalBuffer.prototype._isBuffer = true;\n    }\n    console.log('Global Buffer methods fixed');\n  }\n}\n\n// Fix for Cardano serialization lib specifically\nif (typeof window !== 'undefined') {\n  // Wait for Cardano lib to load\n  setTimeout(() => {\n    const cardanoLib = (window as any).cardano_serialization_lib;\n    if (cardanoLib) {\n      console.log('Cardano serialization lib found, applying specific fixes...');\n      \n      // Fix Buffer methods used by Cardano lib\n      if (cardanoLib.Buffer) {\n        cardanoLib.Buffer.isBuffer = function(obj: any) {\n          return obj && (obj._isBuffer || obj instanceof Buffer);\n        };\n      }\n      \n      // Fix any other problematic methods\n      if (cardanoLib.Buffer && cardanoLib.Buffer.prototype) {\n        cardanoLib.Buffer.prototype._isBuffer = true;\n      }\n    }\n  }, 1000);\n}\n\n// Fix for MIME Buffer error specifically\nif (typeof window !== 'undefined') {\n  // Override console.error to catch MIME Buffer errors\n  const originalConsoleError = console.error;\n  console.error = function(...args: any[]) {\n    const message = args.join(' ');\n    if (message.includes('Could not find MIME for Buffer')) {\n      console.warn('MIME Buffer error caught and suppressed:', message);\n      return;\n    }\n    originalConsoleError.apply(console, args);\n  };\n  console.log('Console error override applied');\n}\n\nconsole.log('Cardano web fix loaded successfully');\n\nexport { };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}