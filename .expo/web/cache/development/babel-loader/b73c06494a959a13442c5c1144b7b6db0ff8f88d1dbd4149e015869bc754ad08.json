{"ast":null,"code":"import _construct from \"@babel/runtime/helpers/construct\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nvar _Buffer;\nconsole.log('Loading MIME Buffer fix...');\nif (typeof global !== 'undefined') {\n  global.Buffer = require('buffer').Buffer;\n  console.log('Global Buffer polyfill applied');\n}\nvar originalGetType = (_Buffer = global.Buffer) == null ? void 0 : _Buffer.isBuffer;\nif (originalGetType) {\n  global.Buffer.isBuffer = function (obj) {\n    return obj && obj._isBuffer;\n  };\n  console.log('Buffer.isBuffer polyfill applied');\n}\nif (typeof window !== 'undefined') {\n  window.Buffer = require('buffer').Buffer;\n  var originalBuffer = window.Buffer;\n  if (originalBuffer) {\n    window.Buffer.prototype._isBuffer = true;\n    console.log('Window Buffer prototype polyfill applied');\n  }\n}\nif (typeof window !== 'undefined') {\n  var _navigator;\n  var originalMimeType = (_navigator = window.navigator) == null ? void 0 : _navigator.mimeTypes;\n  if (originalMimeType) {\n    window.navigator.mimeTypes = new Proxy(originalMimeType, {\n      get: function get(target, prop) {\n        if (prop === 'getType') {\n          return function () {\n            return 'application/octet-stream';\n          };\n        }\n        return target[prop];\n      }\n    });\n    console.log('MIME types polyfill applied');\n  }\n}\nif (typeof Buffer !== 'undefined') {\n  var OriginalBuffer = Buffer;\n  global.Buffer = function () {\n    var buffer = _construct(OriginalBuffer, _toConsumableArray(arguments));\n    buffer._isBuffer = true;\n    return buffer;\n  };\n  Object.setPrototypeOf(global.Buffer, OriginalBuffer);\n  Object.setPrototypeOf(global.Buffer.prototype, OriginalBuffer.prototype);\n  Object.getOwnPropertyNames(OriginalBuffer).forEach(function (name) {\n    if (name !== 'prototype' && name !== 'length' && name !== 'name') {\n      global.Buffer[name] = OriginalBuffer[name];\n    }\n  });\n  console.log('Buffer constructor polyfill applied');\n}\nif (typeof window !== 'undefined') {\n  var cardanoLib = window.cardano_serialization_lib;\n  if (cardanoLib) {\n    console.log('Cardano serialization lib found, applying fixes...');\n    if (cardanoLib.Buffer) {\n      cardanoLib.Buffer.isBuffer = function (obj) {\n        return obj && (obj._isBuffer || obj instanceof Buffer);\n      };\n    }\n  }\n}\nconsole.log('MIME Buffer fix loaded successfully');\nexport {};","map":{"version":3,"names":["console","log","global","Buffer","require","originalGetType","_Buffer","isBuffer","obj","_isBuffer","window","originalBuffer","prototype","_navigator","originalMimeType","navigator","mimeTypes","Proxy","get","target","prop","OriginalBuffer","buffer","_construct","_toConsumableArray","arguments","Object","setPrototypeOf","getOwnPropertyNames","forEach","name","cardanoLib","cardano_serialization_lib"],"sources":["/Users/sonson/Documents/code/venera/X150-Valkyrie/src/polyfills/mime-buffer-fix.ts"],"sourcesContent":["// MIME Buffer fix for Cardano serialization lib\n\nconsole.log('Loading MIME Buffer fix...');\n\n// Fix Buffer MIME type issues\nif (typeof global !== 'undefined') {\n  (global as any).Buffer = require('buffer').Buffer;\n  console.log('Global Buffer polyfill applied');\n}\n\n// Override MIME type detection\nconst originalGetType = (global as any).Buffer?.isBuffer;\nif (originalGetType) {\n  (global as any).Buffer.isBuffer = function (obj: any) {\n    return obj && obj._isBuffer;\n  };\n  console.log('Buffer.isBuffer polyfill applied');\n}\n\n// Fix for Cardano serialization lib Buffer issues\nif (typeof window !== 'undefined') {\n  (window as any).Buffer = require('buffer').Buffer;\n  \n  // Override problematic MIME detection\n  const originalBuffer = (window as any).Buffer;\n  if (originalBuffer) {\n    (window as any).Buffer.prototype._isBuffer = true;\n    console.log('Window Buffer prototype polyfill applied');\n  }\n}\n\n// Fix MIME type detection globally\nif (typeof window !== 'undefined') {\n  // Override MIME type detection\n  const originalMimeType = (window as any).navigator?.mimeTypes;\n  if (originalMimeType) {\n    (window as any).navigator.mimeTypes = new Proxy(originalMimeType, {\n      get: function (target, prop) {\n        if (prop === 'getType') {\n          return function () {\n            return 'application/octet-stream';\n          };\n        }\n        return target[prop];\n      }\n    });\n    console.log('MIME types polyfill applied');\n  }\n}\n\n// Fix Buffer constructor\nif (typeof Buffer !== 'undefined') {\n  const OriginalBuffer = Buffer;\n  (global as any).Buffer = function () {\n    const buffer = new (OriginalBuffer as any)(...(arguments as any));\n    (buffer as any)._isBuffer = true;\n    return buffer;\n  };\n  \n  // Copy static methods\n  Object.setPrototypeOf((global as any).Buffer, OriginalBuffer);\n  Object.setPrototypeOf((global as any).Buffer.prototype, OriginalBuffer.prototype);\n  \n  // Copy static properties\n  Object.getOwnPropertyNames(OriginalBuffer).forEach(name => {\n    if (name !== 'prototype' && name !== 'length' && name !== 'name') {\n      (global as any).Buffer[name] = (OriginalBuffer as any)[name];\n    }\n  });\n  console.log('Buffer constructor polyfill applied');\n}\n\n// Fix for Cardano serialization lib specifically\nif (typeof window !== 'undefined') {\n  // Override problematic methods\n  const cardanoLib = (window as any).cardano_serialization_lib;\n  if (cardanoLib) {\n    console.log('Cardano serialization lib found, applying fixes...');\n    \n    // Fix Buffer methods used by Cardano lib\n    if (cardanoLib.Buffer) {\n      cardanoLib.Buffer.isBuffer = function(obj: any) {\n        return obj && (obj._isBuffer || obj instanceof Buffer);\n      };\n    }\n  }\n}\n\nconsole.log('MIME Buffer fix loaded successfully');\n\nexport { };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}