{"ast":null,"code":"import React, { useMemo } from \"react\";\nimport Svg, { Defs, G, Path, Rect, Image, ClipPath, LinearGradient, Stop } from \"react-native-svg\";\nimport genMatrix from \"./genMatrix\";\nimport transformMatrixIntoPath from \"./transformMatrixIntoPath\";\nimport LogoSVG from \"./LogoSVG\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar renderLogo = function renderLogo(_ref) {\n  var size = _ref.size,\n    backgroundColor = _ref.backgroundColor,\n    logo = _ref.logo,\n    logoSVG = _ref.logoSVG,\n    logoSize = _ref.logoSize,\n    logoBackgroundColor = _ref.logoBackgroundColor,\n    logoColor = _ref.logoColor,\n    logoMargin = _ref.logoMargin,\n    logoBorderRadius = _ref.logoBorderRadius;\n  var logoPosition = (size - logoSize - logoMargin * 2) / 2;\n  var logoBackgroundSize = logoSize + logoMargin * 2;\n  var logoBackgroundBorderRadius = logoBorderRadius + logoMargin / logoSize * logoBorderRadius;\n  return _jsxs(G, {\n    x: logoPosition,\n    y: logoPosition,\n    children: [_jsxs(Defs, {\n      children: [_jsx(ClipPath, {\n        id: \"clip-logo-background\",\n        children: _jsx(Rect, {\n          width: logoBackgroundSize,\n          height: logoBackgroundSize,\n          rx: logoBackgroundBorderRadius,\n          ry: logoBackgroundBorderRadius\n        })\n      }), _jsx(ClipPath, {\n        id: \"clip-logo\",\n        children: _jsx(Rect, {\n          width: logoSize,\n          height: logoSize,\n          rx: logoBorderRadius,\n          ry: logoBorderRadius\n        })\n      })]\n    }), _jsx(G, {\n      children: _jsx(Rect, {\n        width: logoBackgroundSize,\n        height: logoBackgroundSize,\n        fill: backgroundColor,\n        clipPath: \"url(#clip-logo-background)\"\n      })\n    }), _jsxs(G, {\n      x: logoMargin,\n      y: logoMargin,\n      clipPath: \"url(#clip-logo)\",\n      children: [_jsx(Rect, {\n        width: logoBackgroundSize - logoMargin,\n        height: logoBackgroundSize - logoMargin,\n        fill: logoBackgroundColor\n      }), logoSVG ? _jsx(LogoSVG, {\n        svg: logoSVG,\n        logoSize: logoSize,\n        logoColor: logoColor\n      }) : _jsx(Image, {\n        width: logoSize,\n        height: logoSize,\n        preserveAspectRatio: \"xMidYMid slice\",\n        href: logo,\n        clipPath: \"url(#clip-logo)\"\n      })]\n    })]\n  });\n};\nvar QRCode = function QRCode(_ref2) {\n  var _ref2$value = _ref2.value,\n    value = _ref2$value === void 0 ? \"this is a QR code\" : _ref2$value,\n    _ref2$size = _ref2.size,\n    size = _ref2$size === void 0 ? 100 : _ref2$size,\n    _ref2$color = _ref2.color,\n    color = _ref2$color === void 0 ? \"black\" : _ref2$color,\n    _ref2$backgroundColor = _ref2.backgroundColor,\n    backgroundColor = _ref2$backgroundColor === void 0 ? \"white\" : _ref2$backgroundColor,\n    logo = _ref2.logo,\n    logoSVG = _ref2.logoSVG,\n    _ref2$logoSize = _ref2.logoSize,\n    logoSize = _ref2$logoSize === void 0 ? size * 0.2 : _ref2$logoSize,\n    _ref2$logoBackgroundC = _ref2.logoBackgroundColor,\n    logoBackgroundColor = _ref2$logoBackgroundC === void 0 ? \"transparent\" : _ref2$logoBackgroundC,\n    logoColor = _ref2.logoColor,\n    _ref2$logoMargin = _ref2.logoMargin,\n    logoMargin = _ref2$logoMargin === void 0 ? 2 : _ref2$logoMargin,\n    _ref2$logoBorderRadiu = _ref2.logoBorderRadius,\n    logoBorderRadius = _ref2$logoBorderRadiu === void 0 ? 0 : _ref2$logoBorderRadiu,\n    _ref2$quietZone = _ref2.quietZone,\n    quietZone = _ref2$quietZone === void 0 ? 0 : _ref2$quietZone,\n    _ref2$enableLinearGra = _ref2.enableLinearGradient,\n    enableLinearGradient = _ref2$enableLinearGra === void 0 ? false : _ref2$enableLinearGra,\n    _ref2$gradientDirecti = _ref2.gradientDirection,\n    gradientDirection = _ref2$gradientDirecti === void 0 ? [\"0%\", \"0%\", \"100%\", \"100%\"] : _ref2$gradientDirecti,\n    _ref2$linearGradient = _ref2.linearGradient,\n    linearGradient = _ref2$linearGradient === void 0 ? [\"rgb(255,0,0)\", \"rgb(0,255,255)\"] : _ref2$linearGradient,\n    _ref2$ecl = _ref2.ecl,\n    ecl = _ref2$ecl === void 0 ? \"M\" : _ref2$ecl,\n    getRef = _ref2.getRef,\n    onError = _ref2.onError,\n    testID = _ref2.testID;\n  var result = useMemo(function () {\n    try {\n      return transformMatrixIntoPath(genMatrix(value, ecl), size);\n    } catch (error) {\n      if (onError && typeof onError === \"function\") {\n        onError(error);\n      } else {\n        throw error;\n      }\n    }\n  }, [value, size, ecl]);\n  if (!result) {\n    return null;\n  }\n  var path = result.path,\n    cellSize = result.cellSize;\n  var displayLogo = logo || logoSVG;\n  return _jsxs(Svg, {\n    testID: testID,\n    ref: getRef,\n    viewBox: [-quietZone, -quietZone, size + quietZone * 2, size + quietZone * 2].join(\" \"),\n    width: size,\n    height: size,\n    children: [_jsx(Defs, {\n      children: _jsxs(LinearGradient, {\n        id: \"grad\",\n        x1: gradientDirection[0],\n        y1: gradientDirection[1],\n        x2: gradientDirection[2],\n        y2: gradientDirection[3],\n        children: [_jsx(Stop, {\n          offset: \"0\",\n          stopColor: linearGradient[0],\n          stopOpacity: \"1\"\n        }), _jsx(Stop, {\n          offset: \"1\",\n          stopColor: linearGradient[1],\n          stopOpacity: \"1\"\n        })]\n      })\n    }), _jsx(G, {\n      children: _jsx(Rect, {\n        x: -quietZone,\n        y: -quietZone,\n        width: size + quietZone * 2,\n        height: size + quietZone * 2,\n        fill: backgroundColor\n      })\n    }), _jsx(G, {\n      children: _jsx(Path, {\n        d: path,\n        strokeLinecap: \"butt\",\n        stroke: enableLinearGradient ? \"url(#grad)\" : color,\n        strokeWidth: cellSize\n      })\n    }), displayLogo && renderLogo({\n      size: size,\n      backgroundColor: backgroundColor,\n      logo: logo,\n      logoSVG: logoSVG,\n      logoSize: logoSize,\n      logoBackgroundColor: logoBackgroundColor,\n      logoColor: logoColor,\n      logoMargin: logoMargin,\n      logoBorderRadius: logoBorderRadius\n    })]\n  });\n};\nexport default QRCode;","map":{"version":3,"names":["React","useMemo","Svg","Defs","G","Path","Rect","Image","ClipPath","LinearGradient","Stop","genMatrix","transformMatrixIntoPath","LogoSVG","jsx","_jsx","jsxs","_jsxs","renderLogo","_ref","size","backgroundColor","logo","logoSVG","logoSize","logoBackgroundColor","logoColor","logoMargin","logoBorderRadius","logoPosition","logoBackgroundSize","logoBackgroundBorderRadius","x","y","children","id","width","height","rx","ry","fill","clipPath","svg","preserveAspectRatio","href","QRCode","_ref2","_ref2$value","value","_ref2$size","_ref2$color","color","_ref2$backgroundColor","_ref2$logoSize","_ref2$logoBackgroundC","_ref2$logoMargin","_ref2$logoBorderRadiu","_ref2$quietZone","quietZone","_ref2$enableLinearGra","enableLinearGradient","_ref2$gradientDirecti","gradientDirection","_ref2$linearGradient","linearGradient","_ref2$ecl","ecl","getRef","onError","testID","result","error","path","cellSize","displayLogo","ref","viewBox","join","x1","y1","x2","y2","offset","stopColor","stopOpacity","d","strokeLinecap","stroke","strokeWidth"],"sources":["/Users/sonson/Documents/code/venera/X150-Valkyrie/node_modules/react-native-qrcode-svg/src/index.js"],"sourcesContent":["import React, { useMemo } from \"react\";\nimport Svg, {\n  Defs,\n  G,\n  Path,\n  Rect,\n  Image,\n  ClipPath,\n  LinearGradient,\n  Stop,\n} from \"react-native-svg\";\nimport genMatrix from \"./genMatrix\";\nimport transformMatrixIntoPath from \"./transformMatrixIntoPath\";\nimport LogoSVG from \"./LogoSVG\";\n\nconst renderLogo = ({\n  size,\n  backgroundColor,\n  logo,\n  logoSVG,\n  logoSize,\n  logoBackgroundColor,\n  logoColor,\n  logoMargin,\n  logoBorderRadius,\n}) => {\n  const logoPosition = (size - logoSize - logoMargin * 2) / 2;\n  const logoBackgroundSize = logoSize + logoMargin * 2;\n  const logoBackgroundBorderRadius =\n    logoBorderRadius + (logoMargin / logoSize) * logoBorderRadius;\n\n  return (\n    <G x={logoPosition} y={logoPosition}>\n      <Defs>\n        <ClipPath id=\"clip-logo-background\">\n          <Rect\n            width={logoBackgroundSize}\n            height={logoBackgroundSize}\n            rx={logoBackgroundBorderRadius}\n            ry={logoBackgroundBorderRadius}\n          />\n        </ClipPath>\n        <ClipPath id=\"clip-logo\">\n          <Rect\n            width={logoSize}\n            height={logoSize}\n            rx={logoBorderRadius}\n            ry={logoBorderRadius}\n          />\n        </ClipPath>\n      </Defs>\n      <G>\n        <Rect\n          width={logoBackgroundSize}\n          height={logoBackgroundSize}\n          fill={backgroundColor}\n          clipPath=\"url(#clip-logo-background)\"\n        />\n      </G>\n      <G x={logoMargin} y={logoMargin} clipPath=\"url(#clip-logo)\">\n        <Rect\n          width={logoBackgroundSize - logoMargin}\n          height={logoBackgroundSize - logoMargin}\n          fill={logoBackgroundColor}\n        />\n        {logoSVG ? (\n          <LogoSVG svg={logoSVG} logoSize={logoSize} logoColor={logoColor} />\n        ) : (\n          <Image\n            width={logoSize}\n            height={logoSize}\n            preserveAspectRatio=\"xMidYMid slice\"\n            href={logo}\n            clipPath=\"url(#clip-logo)\"\n          />\n        )}\n      </G>\n    </G>\n  );\n};\n\nconst QRCode = ({\n  value = \"this is a QR code\",\n  size = 100,\n  color = \"black\",\n  backgroundColor = \"white\",\n  logo,\n  logoSVG,\n  logoSize = size * 0.2,\n  logoBackgroundColor = \"transparent\",\n  logoColor,\n  logoMargin = 2,\n  logoBorderRadius = 0,\n  quietZone = 0,\n  enableLinearGradient = false,\n  gradientDirection = [\"0%\", \"0%\", \"100%\", \"100%\"],\n  linearGradient = [\"rgb(255,0,0)\", \"rgb(0,255,255)\"],\n  ecl = \"M\",\n  getRef,\n  onError,\n  testID,\n}) => {\n  const result = useMemo(() => {\n    try {\n      return transformMatrixIntoPath(genMatrix(value, ecl), size);\n    } catch (error) {\n      if (onError && typeof onError === \"function\") {\n        onError(error);\n      } else {\n        // Pass the error when no handler presented\n        throw error;\n      }\n    }\n  }, [value, size, ecl]);\n\n  if (!result) {\n    return null;\n  }\n\n  const { path, cellSize } = result;\n  const displayLogo = logo || logoSVG;\n\n  return (\n    <Svg\n      testID={testID}\n      ref={getRef}\n      viewBox={[\n        -quietZone,\n        -quietZone,\n        size + quietZone * 2,\n        size + quietZone * 2,\n      ].join(\" \")}\n      width={size}\n      height={size}\n    >\n      <Defs>\n        <LinearGradient\n          id=\"grad\"\n          x1={gradientDirection[0]}\n          y1={gradientDirection[1]}\n          x2={gradientDirection[2]}\n          y2={gradientDirection[3]}\n        >\n          <Stop offset=\"0\" stopColor={linearGradient[0]} stopOpacity=\"1\" />\n          <Stop offset=\"1\" stopColor={linearGradient[1]} stopOpacity=\"1\" />\n        </LinearGradient>\n      </Defs>\n      <G>\n        <Rect\n          x={-quietZone}\n          y={-quietZone}\n          width={size + quietZone * 2}\n          height={size + quietZone * 2}\n          fill={backgroundColor}\n        />\n      </G>\n      <G>\n        <Path\n          d={path}\n          strokeLinecap=\"butt\"\n          stroke={enableLinearGradient ? \"url(#grad)\" : color}\n          strokeWidth={cellSize}\n        />\n      </G>\n      {displayLogo &&\n        renderLogo({\n          size,\n          backgroundColor,\n          logo,\n          logoSVG,\n          logoSize,\n          logoBackgroundColor,\n          logoColor,\n          logoMargin,\n          logoBorderRadius,\n        })}\n    </Svg>\n  );\n};\n\nexport default QRCode;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}