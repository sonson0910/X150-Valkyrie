{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { ConfigurationService } from \"./ConfigurationService\";\nimport { NetworkService } from \"./NetworkService\";\nimport { ErrorHandler, ErrorSeverity, ErrorType } from \"./ErrorHandler\";\nexport var CardanoAPIService = function () {\n  function CardanoAPIService() {\n    _classCallCheck(this, CardanoAPIService);\n    this.currentNetwork = 'testnet';\n    this.configService = ConfigurationService.getInstance();\n    this.networkService = NetworkService.getInstance();\n    this.errorHandler = ErrorHandler.getInstance();\n  }\n  return _createClass(CardanoAPIService, [{\n    key: \"getProjectId\",\n    value: function getProjectId(network) {\n      try {\n        var projectId = this.configService.getApiKey('blockfrost', network);\n        if (!projectId) {\n          throw new Error(`Blockfrost project ID not configured for ${network}`);\n        }\n        return projectId;\n      } catch (error) {\n        this.errorHandler.handleError(error, 'CardanoAPIService.getProjectId', ErrorSeverity.HIGH, ErrorType.NETWORK);\n        throw error;\n      }\n    }\n  }, {\n    key: \"getBaseURL\",\n    value: function getBaseURL() {\n      return this.currentNetwork === 'mainnet' ? 'https://cardano-mainnet.blockfrost.io/api/v0' : 'https://cardano-testnet.blockfrost.io/api/v0';\n    }\n  }, {\n    key: \"setNetwork\",\n    value: function setNetwork(network) {\n      this.currentNetwork = network;\n    }\n  }, {\n    key: \"apiCall\",\n    value: (function () {\n      var _apiCall = _asyncToGenerator(function* (endpoint) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        try {\n          var projectId = this.getProjectId(this.currentNetwork);\n          var response = yield fetch(`${this.getBaseURL()}${endpoint}`, _objectSpread(_objectSpread({}, options), {}, {\n            headers: _objectSpread({\n              'project_id': projectId,\n              'Content-Type': 'application/json'\n            }, options.headers)\n          }));\n          if (!response.ok) {\n            var errorData = yield response.json().catch(function () {\n              return {};\n            });\n            throw new Error(`API Error ${response.status}: ${errorData.message || response.statusText}`);\n          }\n          return yield response.json();\n        } catch (error) {\n          console.error(`Cardano API call failed for ${endpoint}:`, error);\n          throw error;\n        }\n      });\n      function apiCall(_x) {\n        return _apiCall.apply(this, arguments);\n      }\n      return apiCall;\n    }())\n  }, {\n    key: \"getHealth\",\n    value: (function () {\n      var _getHealth = _asyncToGenerator(function* () {\n        return this.apiCall('/health');\n      });\n      function getHealth() {\n        return _getHealth.apply(this, arguments);\n      }\n      return getHealth;\n    }())\n  }, {\n    key: \"getAddressInfo\",\n    value: (function () {\n      var _getAddressInfo = _asyncToGenerator(function* (address) {\n        return this.apiCall(`/addresses/${address}`);\n      });\n      function getAddressInfo(_x2) {\n        return _getAddressInfo.apply(this, arguments);\n      }\n      return getAddressInfo;\n    }())\n  }, {\n    key: \"getAddressUTXOs\",\n    value: (function () {\n      var _getAddressUTXOs = _asyncToGenerator(function* (address) {\n        return this.apiCall(`/addresses/${address}/utxos`);\n      });\n      function getAddressUTXOs(_x3) {\n        return _getAddressUTXOs.apply(this, arguments);\n      }\n      return getAddressUTXOs;\n    }())\n  }, {\n    key: \"getAddressTransactions\",\n    value: (function () {\n      var _getAddressTransactions = _asyncToGenerator(function* (address) {\n        var count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 50;\n        var page = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n        var order = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'desc';\n        return this.apiCall(`/addresses/${address}/transactions?count=${count}&page=${page}&order=${order}`);\n      });\n      function getAddressTransactions(_x4) {\n        return _getAddressTransactions.apply(this, arguments);\n      }\n      return getAddressTransactions;\n    }())\n  }, {\n    key: \"getTransaction\",\n    value: (function () {\n      var _getTransaction = _asyncToGenerator(function* (txHash) {\n        return this.apiCall(`/txs/${txHash}`);\n      });\n      function getTransaction(_x5) {\n        return _getTransaction.apply(this, arguments);\n      }\n      return getTransaction;\n    }())\n  }, {\n    key: \"getTransactionUTXOs\",\n    value: (function () {\n      var _getTransactionUTXOs = _asyncToGenerator(function* (txHash) {\n        return this.apiCall(`/txs/${txHash}/utxos`);\n      });\n      function getTransactionUTXOs(_x6) {\n        return _getTransactionUTXOs.apply(this, arguments);\n      }\n      return getTransactionUTXOs;\n    }())\n  }, {\n    key: \"submitTransaction\",\n    value: (function () {\n      var _submitTransaction = _asyncToGenerator(function* (txData) {\n        var response = yield this.apiCall('/tx/submit', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/cbor'\n          },\n          body: txData\n        });\n        return response;\n      });\n      function submitTransaction(_x7) {\n        return _submitTransaction.apply(this, arguments);\n      }\n      return submitTransaction;\n    }())\n  }, {\n    key: \"getProtocolParameters\",\n    value: (function () {\n      var _getProtocolParameters = _asyncToGenerator(function* () {\n        return this.apiCall('/epochs/latest/parameters');\n      });\n      function getProtocolParameters() {\n        return _getProtocolParameters.apply(this, arguments);\n      }\n      return getProtocolParameters;\n    }())\n  }, {\n    key: \"estimateTransactionFee\",\n    value: (function () {\n      var _estimateTransactionFee = _asyncToGenerator(function* (txSize) {\n        try {\n          var params = yield this.getProtocolParameters();\n          var fee = params.min_fee_a * txSize + params.min_fee_b;\n          return fee.toString();\n        } catch (error) {\n          console.error('Failed to estimate fee:', error);\n          return '200000';\n        }\n      });\n      function estimateTransactionFee(_x8) {\n        return _estimateTransactionFee.apply(this, arguments);\n      }\n      return estimateTransactionFee;\n    }())\n  }, {\n    key: \"getCurrentEpoch\",\n    value: (function () {\n      var _getCurrentEpoch = _asyncToGenerator(function* () {\n        return this.apiCall('/epochs/latest');\n      });\n      function getCurrentEpoch() {\n        return _getCurrentEpoch.apply(this, arguments);\n      }\n      return getCurrentEpoch;\n    }())\n  }, {\n    key: \"getLatestBlock\",\n    value: (function () {\n      var _getLatestBlock = _asyncToGenerator(function* () {\n        return this.apiCall('/blocks/latest');\n      });\n      function getLatestBlock() {\n        return _getLatestBlock.apply(this, arguments);\n      }\n      return getLatestBlock;\n    }())\n  }, {\n    key: \"validateAddress\",\n    value: (function () {\n      var _validateAddress = _asyncToGenerator(function* (address) {\n        try {\n          return this.apiCall(`/addresses/${address}/validate`);\n        } catch (error) {\n          return {\n            address: address,\n            is_valid: false\n          };\n        }\n      });\n      function validateAddress(_x9) {\n        return _validateAddress.apply(this, arguments);\n      }\n      return validateAddress;\n    }())\n  }, {\n    key: \"isAvailable\",\n    value: (function () {\n      var _isAvailable = _asyncToGenerator(function* () {\n        try {\n          var health = yield this.getHealth();\n          return health.is_healthy;\n        } catch (_unused) {\n          return false;\n        }\n      });\n      function isAvailable() {\n        return _isAvailable.apply(this, arguments);\n      }\n      return isAvailable;\n    }())\n  }, {\n    key: \"setApiKey\",\n    value: function setApiKey(apiKey) {\n      this.configService.setApiKey('blockfrost', this.currentNetwork, apiKey);\n    }\n  }, {\n    key: \"getNetwork\",\n    value: function getNetwork() {\n      return this.currentNetwork;\n    }\n  }, {\n    key: \"getStakingPools\",\n    value: function () {\n      var _getStakingPools = _asyncToGenerator(function* () {\n        var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        try {\n          var response = yield this.apiCall('/pools?count=' + limit + '&page=' + (offset / limit + 1));\n          return response || [];\n        } catch (error) {\n          console.error('Failed to get staking pools:', error);\n          return [];\n        }\n      });\n      function getStakingPools() {\n        return _getStakingPools.apply(this, arguments);\n      }\n      return getStakingPools;\n    }()\n  }, {\n    key: \"getStakingPool\",\n    value: function () {\n      var _getStakingPool = _asyncToGenerator(function* (poolId) {\n        try {\n          var response = yield this.apiCall(`/pools/${poolId}`);\n          return response;\n        } catch (error) {\n          console.error('Failed to get staking pool:', error);\n          return null;\n        }\n      });\n      function getStakingPool(_x0) {\n        return _getStakingPool.apply(this, arguments);\n      }\n      return getStakingPool;\n    }()\n  }, {\n    key: \"getAddressAssets\",\n    value: function () {\n      var _getAddressAssets = _asyncToGenerator(function* (address) {\n        try {\n          var response = yield this.apiCall(`/addresses/${address}/utxos`);\n          return response || [];\n        } catch (error) {\n          console.error('Failed to get address assets:', error);\n          return [];\n        }\n      });\n      function getAddressAssets(_x1) {\n        return _getAddressAssets.apply(this, arguments);\n      }\n      return getAddressAssets;\n    }()\n  }, {\n    key: \"getAsset\",\n    value: function () {\n      var _getAsset = _asyncToGenerator(function* (assetId) {\n        try {\n          var response = yield this.apiCall(`/assets/${assetId}`);\n          return response;\n        } catch (error) {\n          console.error('Failed to get asset:', error);\n          return null;\n        }\n      });\n      function getAsset(_x10) {\n        return _getAsset.apply(this, arguments);\n      }\n      return getAsset;\n    }()\n  }, {\n    key: \"getPolicyAssets\",\n    value: function () {\n      var _getPolicyAssets = _asyncToGenerator(function* (policyId) {\n        try {\n          var response = yield this.apiCall(`/assets/policy/${policyId}`);\n          return response || [];\n        } catch (error) {\n          console.error('Failed to get policy assets:', error);\n          return [];\n        }\n      });\n      function getPolicyAssets(_x11) {\n        return _getPolicyAssets.apply(this, arguments);\n      }\n      return getPolicyAssets;\n    }()\n  }, {\n    key: \"getAddressBalance\",\n    value: function () {\n      var _getAddressBalance = _asyncToGenerator(function* (address) {\n        try {\n          var response = yield this.apiCall(`/addresses/${address}`);\n          return (response == null ? void 0 : response.amount) || '0';\n        } catch (error) {\n          console.error('Failed to get address balance:', error);\n          return '0';\n        }\n      });\n      function getAddressBalance(_x12) {\n        return _getAddressBalance.apply(this, arguments);\n      }\n      return getAddressBalance;\n    }()\n  }, {\n    key: \"buildTransaction\",\n    value: function () {\n      var _buildTransaction = _asyncToGenerator(function* (params) {\n        try {\n          console.log('Building transaction with params:', params);\n          return {\n            id: 'tx_' + Date.now(),\n            params: params,\n            built: true,\n            timestamp: new Date().toISOString()\n          };\n        } catch (error) {\n          console.error('Failed to build transaction:', error);\n          throw error;\n        }\n      });\n      function buildTransaction(_x13) {\n        return _buildTransaction.apply(this, arguments);\n      }\n      return buildTransaction;\n    }()\n  }], [{\n    key: \"getInstance\",\n    value: function getInstance() {\n      if (!CardanoAPIService.instance) {\n        CardanoAPIService.instance = new CardanoAPIService();\n      }\n      return CardanoAPIService.instance;\n    }\n  }, {\n    key: \"adaToLovelace\",\n    value: function adaToLovelace(ada) {\n      var adaNum = typeof ada === 'string' ? parseFloat(ada) : ada;\n      return Math.floor(adaNum * 1000000).toString();\n    }\n  }, {\n    key: \"lovelaceToAda\",\n    value: function lovelaceToAda(lovelace) {\n      var lovelaceNum = typeof lovelace === 'string' ? parseInt(lovelace) : lovelace;\n      return (lovelaceNum / 1000000).toFixed(6);\n    }\n  }, {\n    key: \"formatAmount\",\n    value: function formatAmount(amount) {\n      var adaEntry = amount.find(function (a) {\n        return a.unit === 'lovelace';\n      });\n      var ada = adaEntry ? this.lovelaceToAda(adaEntry.quantity) : '0';\n      var assets = amount.filter(function (a) {\n        return a.unit !== 'lovelace';\n      }).map(function (a) {\n        return {\n          policyId: a.unit.slice(0, 56),\n          assetName: a.unit.slice(56),\n          quantity: a.quantity\n        };\n      });\n      return {\n        ada: ada,\n        assets: assets\n      };\n    }\n  }]);\n}();","map":{"version":3,"names":["ConfigurationService","NetworkService","ErrorHandler","ErrorSeverity","ErrorType","CardanoAPIService","_classCallCheck","currentNetwork","configService","getInstance","networkService","errorHandler","_createClass","key","value","getProjectId","network","projectId","getApiKey","Error","error","handleError","HIGH","NETWORK","getBaseURL","setNetwork","_apiCall","_asyncToGenerator","endpoint","options","arguments","length","undefined","response","fetch","_objectSpread","headers","ok","errorData","json","catch","status","message","statusText","console","apiCall","_x","apply","_getHealth","getHealth","_getAddressInfo","address","getAddressInfo","_x2","_getAddressUTXOs","getAddressUTXOs","_x3","_getAddressTransactions","count","page","order","getAddressTransactions","_x4","_getTransaction","txHash","getTransaction","_x5","_getTransactionUTXOs","getTransactionUTXOs","_x6","_submitTransaction","txData","method","body","submitTransaction","_x7","_getProtocolParameters","getProtocolParameters","_estimateTransactionFee","txSize","params","fee","min_fee_a","min_fee_b","toString","estimateTransactionFee","_x8","_getCurrentEpoch","getCurrentEpoch","_getLatestBlock","getLatestBlock","_validateAddress","is_valid","validateAddress","_x9","_isAvailable","health","is_healthy","_unused","isAvailable","setApiKey","apiKey","getNetwork","_getStakingPools","limit","offset","getStakingPools","_getStakingPool","poolId","getStakingPool","_x0","_getAddressAssets","getAddressAssets","_x1","_getAsset","assetId","getAsset","_x10","_getPolicyAssets","policyId","getPolicyAssets","_x11","_getAddressBalance","amount","getAddressBalance","_x12","_buildTransaction","log","id","Date","now","built","timestamp","toISOString","buildTransaction","_x13","instance","adaToLovelace","ada","adaNum","parseFloat","Math","floor","lovelaceToAda","lovelace","lovelaceNum","parseInt","toFixed","formatAmount","adaEntry","find","a","unit","quantity","assets","filter","map","slice","assetName"],"sources":["/Users/sonson/Documents/code/venera/X150-Valkyrie/src/services/CardanoAPIService.ts"],"sourcesContent":["import { CARDANO_NETWORKS } from '../constants/index';\nimport { ConfigurationService } from './ConfigurationService';\nimport { NetworkService } from './NetworkService';\nimport { ErrorHandler, ErrorSeverity, ErrorType } from './ErrorHandler';\n\n/**\n * Service tích hợp với Blockfrost API cho Cardano\n * Xử lý giao tiếp với blockchain để lấy balance, submit transaction, etc.\n */\nexport class CardanoAPIService {\n    private static instance: CardanoAPIService;\n    private configService: ConfigurationService;\n    private networkService: NetworkService;\n    private errorHandler: ErrorHandler;\n    private currentNetwork: 'mainnet' | 'testnet' = 'testnet';\n\n    private constructor() {\n        this.configService = ConfigurationService.getInstance();\n        this.networkService = NetworkService.getInstance();\n        this.errorHandler = ErrorHandler.getInstance();\n    }\n\n    public static getInstance(): CardanoAPIService {\n        if (!CardanoAPIService.instance) {\n            CardanoAPIService.instance = new CardanoAPIService();\n        }\n        return CardanoAPIService.instance;\n    }\n\n    /**\n     * Get Blockfrost project ID for current network\n     */\n    private getProjectId(network: 'mainnet' | 'testnet'): string {\n        try {\n            const projectId = this.configService.getApiKey('blockfrost', network);\n            if (!projectId) {\n                throw new Error(`Blockfrost project ID not configured for ${network}`);\n            }\n            return projectId;\n        } catch (error) {\n            this.errorHandler.handleError(\n                error as Error,\n                'CardanoAPIService.getProjectId',\n                ErrorSeverity.HIGH,\n                ErrorType.NETWORK\n            );\n            throw error;\n        }\n    }\n\n    /**\n     * Get base URL for current network\n     */\n    private getBaseURL(): string {\n        return this.currentNetwork === 'mainnet'\n            ? 'https://cardano-mainnet.blockfrost.io/api/v0'\n            : 'https://cardano-testnet.blockfrost.io/api/v0';\n    }\n\n    /**\n     * Set current network\n     */\n    setNetwork(network: 'mainnet' | 'testnet'): void {\n        this.currentNetwork = network;\n    }\n\n    /**\n     * Thực hiện API call với error handling\n     * @param endpoint - API endpoint\n     * @param options - Fetch options\n     * @returns API response\n     */\n    private async apiCall<T>(endpoint: string, options: RequestInit = {}): Promise<T> {\n        try {\n            const projectId = this.getProjectId(this.currentNetwork);\n            const response = await fetch(`${this.getBaseURL()}${endpoint}`, {\n                ...options,\n                headers: {\n                    'project_id': projectId,\n                    'Content-Type': 'application/json',\n                    ...options.headers,\n                },\n            });\n\n            if (!response.ok) {\n                const errorData = await response.json().catch(() => ({}));\n                throw new Error(`API Error ${response.status}: ${errorData.message || response.statusText}`);\n            }\n\n            return await response.json();\n\n        } catch (error) {\n            console.error(`Cardano API call failed for ${endpoint}:`, error);\n            throw error;\n        }\n    }\n\n    /**\n     * Lấy thông tin health của API\n     * @returns Health status\n     */\n    async getHealth(): Promise<{ is_healthy: boolean }> {\n        return this.apiCall('/health');\n    }\n\n    /**\n     * Lấy balance của một địa chỉ\n     * @param address - Cardano address\n     * @returns Address info với balance\n     */\n    async getAddressInfo(address: string): Promise<{\n        address: string;\n        amount: Array<{ unit: string; quantity: string }>;\n        stake_address?: string;\n        type: string;\n        script: boolean;\n    }> {\n        return this.apiCall(`/addresses/${address}`);\n    }\n\n    /**\n     * Lấy UTXOs của một địa chỉ\n     * @param address - Cardano address\n     * @returns Array of UTXOs\n     */\n    async getAddressUTXOs(address: string): Promise<Array<{\n        tx_hash: string;\n        tx_index: number;\n        output_index: number;\n        amount: Array<{ unit: string; quantity: string }>;\n        block: string;\n        data_hash?: string;\n    }>> {\n        return this.apiCall(`/addresses/${address}/utxos`);\n    }\n\n    /**\n     * Lấy lịch sử giao dịch của một địa chỉ\n     * @param address - Cardano address\n     * @param count - Số lượng transactions (max 100)\n     * @param page - Page number\n     * @param order - Order (asc/desc)\n     * @returns Array of transactions\n     */\n    async getAddressTransactions(\n        address: string,\n        count: number = 50,\n        page: number = 1,\n        order: 'asc' | 'desc' = 'desc'\n    ): Promise<Array<{\n        tx_hash: string;\n        tx_index: number;\n        block_height: number;\n        block_time: number;\n    }>> {\n        return this.apiCall(`/addresses/${address}/transactions?count=${count}&page=${page}&order=${order}`);\n    }\n\n    /**\n     * Lấy chi tiết của một transaction\n     * @param txHash - Transaction hash\n     * @returns Transaction details\n     */\n    async getTransaction(txHash: string): Promise<{\n        hash: string;\n        block: string;\n        block_height: number;\n        block_time: number;\n        slot: number;\n        index: number;\n        output_amount: Array<{ unit: string; quantity: string }>;\n        fees: string;\n        deposit: string;\n        size: number;\n        invalid_before?: string;\n        invalid_hereafter?: string;\n        utxo_count: number;\n        withdrawal_count: number;\n        mir_cert_count: number;\n        delegation_count: number;\n        stake_cert_count: number;\n        pool_update_count: number;\n        pool_retire_count: number;\n        asset_mint_or_burn_count: number;\n        redeemer_count: number;\n        valid_contract: boolean;\n    }> {\n        return this.apiCall(`/txs/${txHash}`);\n    }\n\n    /**\n     * Lấy UTXOs của một transaction\n     * @param txHash - Transaction hash\n     * @returns Transaction UTXOs\n     */\n    async getTransactionUTXOs(txHash: string): Promise<{\n        hash: string;\n        inputs: Array<{\n            address: string;\n            amount: Array<{ unit: string; quantity: string }>;\n            tx_hash: string;\n            output_index: number;\n            data_hash?: string;\n            collateral: boolean;\n            reference: boolean;\n        }>;\n        outputs: Array<{\n            address: string;\n            amount: Array<{ unit: string; quantity: string }>;\n            output_index: number;\n            data_hash?: string;\n            collateral: boolean;\n            reference: boolean;\n        }>;\n    }> {\n        return this.apiCall(`/txs/${txHash}/utxos`);\n    }\n\n    /**\n     * Submit một transaction lên blockchain\n     * @param txData - Signed transaction data (CBOR hex)\n     * @returns Transaction hash\n     */\n    async submitTransaction(txData: string): Promise<string> {\n        const response = await this.apiCall<string>('/tx/submit', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/cbor',\n            },\n            body: txData,\n        });\n\n        return response;\n    }\n\n    /**\n     * Lấy protocol parameters hiện tại\n     * @returns Protocol parameters\n     */\n    async getProtocolParameters(): Promise<{\n        epoch: number;\n        min_fee_a: number;\n        min_fee_b: number;\n        pool_deposit: string;\n        key_deposit: string;\n        min_utxo: string;\n        max_tx_size: number;\n        max_val_size?: string;\n        utxo_cost_per_word?: string;\n        coins_per_utxo_word?: string;\n        coins_per_utxo_size?: string;\n        price_mem?: number;\n        price_step?: number;\n        max_tx_ex_mem?: string;\n        max_tx_ex_steps?: string;\n        max_block_ex_mem?: string;\n        max_block_ex_steps?: string;\n        max_collateral_inputs?: number;\n        collateral_percent?: number;\n        nonce?: string;\n    }> {\n        return this.apiCall('/epochs/latest/parameters');\n    }\n\n    /**\n     * Estimate transaction fee\n     * @param txSize - Transaction size in bytes\n     * @returns Estimated fee in lovelace\n     */\n    async estimateTransactionFee(txSize: number): Promise<string> {\n        try {\n            const params = await this.getProtocolParameters();\n            const fee = params.min_fee_a * txSize + params.min_fee_b;\n            return fee.toString();\n\n        } catch (error) {\n            console.error('Failed to estimate fee:', error);\n            // Fallback to default fee\n            return '200000'; // 0.2 ADA\n        }\n    }\n\n    /**\n     * Lấy epoch info hiện tại\n     * @returns Current epoch info\n     */\n    async getCurrentEpoch(): Promise<{\n        epoch: number;\n        start_time: number;\n        end_time: number;\n        first_block_time: number;\n        last_block_time: number;\n        block_count: number;\n        tx_count: number;\n        output: string;\n        fees: string;\n        active_stake?: string;\n    }> {\n        return this.apiCall('/epochs/latest');\n    }\n\n    /**\n     * Lấy thông tin latest block\n     * @returns Latest block info\n     */\n    async getLatestBlock(): Promise<{\n        time: number;\n        height?: number;\n        hash: string;\n        slot?: number;\n        epoch?: number;\n        epoch_slot?: number;\n        slot_leader: string;\n        size: number;\n        tx_count: number;\n        output?: string;\n        fees?: string;\n        block_vrf?: string;\n        previous_block?: string;\n        next_block?: string;\n        confirmations: number;\n    }> {\n        return this.apiCall('/blocks/latest');\n    }\n\n    /**\n     * Validate một address\n     * @param address - Address to validate\n     * @returns Validation result\n     */\n    async validateAddress(address: string): Promise<{\n        address: string;\n        is_valid: boolean;\n        type?: string;\n        stake_address?: string;\n    }> {\n        try {\n            return this.apiCall(`/addresses/${address}/validate`);\n        } catch (error) {\n            return {\n                address,\n                is_valid: false,\n            };\n        }\n    }\n\n    /**\n     * Convert ADA to lovelace\n     * @param ada - Amount in ADA\n     * @returns Amount in lovelace\n     */\n    static adaToLovelace(ada: string | number): string {\n        const adaNum = typeof ada === 'string' ? parseFloat(ada) : ada;\n        return Math.floor(adaNum * 1000000).toString();\n    }\n\n    /**\n     * Convert lovelace to ADA\n     * @param lovelace - Amount in lovelace\n     * @returns Amount in ADA\n     */\n    static lovelaceToAda(lovelace: string | number): string {\n        const lovelaceNum = typeof lovelace === 'string' ? parseInt(lovelace) : lovelace;\n        return (lovelaceNum / 1000000).toFixed(6);\n    }\n\n    /**\n     * Format amount with proper units\n     * @param amount - Amount object from API\n     * @returns Formatted amounts\n     */\n    static formatAmount(amount: Array<{ unit: string; quantity: string }>): {\n        ada: string;\n        assets: Array<{ policyId: string; assetName: string; quantity: string }>;\n    } {\n        const adaEntry = amount.find(a => a.unit === 'lovelace');\n        const ada = adaEntry ? this.lovelaceToAda(adaEntry.quantity) : '0';\n\n        const assets = amount\n            .filter(a => a.unit !== 'lovelace')\n            .map(a => ({\n                policyId: a.unit.slice(0, 56),\n                assetName: a.unit.slice(56),\n                quantity: a.quantity,\n            }));\n\n        return { ada, assets };\n    }\n\n    /**\n     * Check if API is available\n     * @returns true if API is working\n     */\n    async isAvailable(): Promise<boolean> {\n        try {\n            const health = await this.getHealth();\n            return health.is_healthy;\n        } catch {\n            return false;\n        }\n    }\n\n    /**\n     * Set API key\n     * @param apiKey - Blockfrost API key\n     */\n    setApiKey(apiKey: string): void {\n        // Store in configuration service instead\n        this.configService.setApiKey('blockfrost', this.currentNetwork, apiKey);\n    }\n\n    /**\n     * Get current network\n     * @returns Current network\n     */\n    getNetwork(): 'mainnet' | 'testnet' {\n        return this.currentNetwork;\n    }\n\n    // DeFi & Staking Methods\n    async getStakingPools(limit: number = 10, offset: number = 0): Promise<any[]> {\n        try {\n            const response = await this.apiCall<any[]>('/pools?count=' + limit + '&page=' + (offset / limit + 1));\n            return response || [];\n        } catch (error) {\n            console.error('Failed to get staking pools:', error);\n            return [];\n        }\n    }\n\n    async getStakingPool(poolId: string): Promise<any> {\n        try {\n            const response = await this.apiCall<any>(`/pools/${poolId}`);\n            return response;\n        } catch (error) {\n            console.error('Failed to get staking pool:', error);\n            return null;\n        }\n    }\n\n    // NFT Methods\n    async getAddressAssets(address: string): Promise<any[]> {\n        try {\n            const response = await this.apiCall<any[]>(`/addresses/${address}/utxos`);\n            return response || [];\n        } catch (error) {\n            console.error('Failed to get address assets:', error);\n            return [];\n        }\n    }\n\n    async getAsset(assetId: string): Promise<any> {\n        try {\n            const response = await this.apiCall<any>(`/assets/${assetId}`);\n            return response;\n        } catch (error) {\n            console.error('Failed to get asset:', error);\n            return null;\n        }\n    }\n\n    async getPolicyAssets(policyId: string): Promise<any[]> {\n        try {\n            const response = await this.apiCall<any[]>(`/assets/policy/${policyId}`);\n            return response || [];\n        } catch (error) {\n            console.error('Failed to get policy assets:', error);\n            return [];\n        }\n    }\n\n    // Portfolio Methods\n    async getAddressBalance(address: string): Promise<string> {\n        try {\n            const response = await this.apiCall<any>(`/addresses/${address}`);\n            return (response as any)?.amount || '0';\n        } catch (error) {\n            console.error('Failed to get address balance:', error);\n            return '0';\n        }\n    }\n\n    // Transaction Building Methods\n    async buildTransaction(params: any): Promise<any> {\n        try {\n            // This would integrate with cardano-serialization-lib\n            console.log('Building transaction with params:', params);\n\n            // For now, return a mock transaction structure\n            return {\n                id: 'tx_' + Date.now(),\n                params: params,\n                built: true,\n                timestamp: new Date().toISOString()\n            };\n        } catch (error) {\n            console.error('Failed to build transaction:', error);\n            throw error;\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}