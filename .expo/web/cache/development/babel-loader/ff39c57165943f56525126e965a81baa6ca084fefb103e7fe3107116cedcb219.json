{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { BLUETOOTH_CONSTANTS } from \"../constants/index\";\nexport var BluetoothTransferService = function () {\n  function BluetoothTransferService() {\n    _classCallCheck(this, BluetoothTransferService);\n    this.bleManager = null;\n    this.isScanning = false;\n    this.isAdvertising = false;\n    this.connectedDevices = new Map();\n  }\n  return _createClass(BluetoothTransferService, [{\n    key: \"initialize\",\n    value: (function () {\n      var _initialize = _asyncToGenerator(function* () {\n        try {\n          console.log('Initializing Bluetooth service...');\n          if (this.bleManager) {\n            yield this.bleManager.startDeviceScan(null, null, function (error, device) {\n              if (error) {\n                console.error('BLE scan error:', error);\n                return;\n              }\n              console.log('BLE device discovered:', device);\n            });\n          } else {\n            this.bleManager = this.createMockBLEManager();\n            console.log('Mock BLE manager created for development');\n          }\n          console.log('Bluetooth service initialized');\n          return true;\n        } catch (error) {\n          console.error('Failed to initialize Bluetooth:', error);\n          return false;\n        }\n      });\n      function initialize() {\n        return _initialize.apply(this, arguments);\n      }\n      return initialize;\n    }())\n  }, {\n    key: \"checkBluetoothStatus\",\n    value: (function () {\n      var _checkBluetoothStatus = _asyncToGenerator(function* () {\n        try {\n          console.log('Checking Bluetooth status...');\n          if (this.bleManager) {\n            var bleState = yield this.bleManager.state();\n            var permissions = yield this.bleManager.requestPermissions();\n            var advertisingCapability = yield this.bleManager.canAdvertise();\n            return {\n              isEnabled: bleState === 'PoweredOn',\n              hasPermission: permissions,\n              canAdvertise: advertisingCapability\n            };\n          }\n          return {\n            isEnabled: true,\n            hasPermission: true,\n            canAdvertise: true\n          };\n        } catch (error) {\n          console.error('Failed to check Bluetooth status:', error);\n          return {\n            isEnabled: false,\n            hasPermission: false,\n            canAdvertise: false\n          };\n        }\n      });\n      function checkBluetoothStatus() {\n        return _checkBluetoothStatus.apply(this, arguments);\n      }\n      return checkBluetoothStatus;\n    }())\n  }, {\n    key: \"startMerchantMode\",\n    value: (function () {\n      var _startMerchantMode = _asyncToGenerator(function* (merchantInfo) {\n        try {\n          if (this.isAdvertising) {\n            yield this.stopMerchantMode();\n          }\n          var advertisementData = {\n            serviceUUID: BLUETOOTH_CONSTANTS.SERVICE_UUID,\n            merchantName: merchantInfo.name,\n            merchantAddress: merchantInfo.address,\n            acceptedAmount: merchantInfo.acceptedAmount || '',\n            timestamp: Date.now()\n          };\n          if (this.bleManager) {\n            var advertisingOptions = {\n              serviceUUIDs: [BLUETOOTH_CONSTANTS.SERVICE_UUID],\n              manufacturerData: JSON.stringify(advertisementData),\n              localName: merchantInfo.name,\n              txPowerLevel: -12\n            };\n            yield this.bleManager.startAdvertising(advertisingOptions);\n            console.log('BLE advertising started with options:', advertisingOptions);\n          } else {\n            console.log('Mock BLE advertising started for merchant:', merchantInfo.name);\n          }\n          console.log('Started merchant mode:', advertisementData);\n          this.isAdvertising = true;\n          return true;\n        } catch (error) {\n          console.error('Failed to start merchant mode:', error);\n          return false;\n        }\n      });\n      function startMerchantMode(_x) {\n        return _startMerchantMode.apply(this, arguments);\n      }\n      return startMerchantMode;\n    }())\n  }, {\n    key: \"stopMerchantMode\",\n    value: (function () {\n      var _stopMerchantMode = _asyncToGenerator(function* () {\n        try {\n          if (this.bleManager) {\n            try {\n              yield this.bleManager.stopAdvertising();\n              console.log('BLE advertising stopped successfully');\n            } catch (stopError) {\n              console.warn('Failed to stop BLE advertising:', stopError);\n            }\n          } else {\n            console.log('Mock BLE advertising stopped');\n          }\n          console.log('Stopped merchant mode');\n          this.isAdvertising = false;\n          return true;\n        } catch (error) {\n          console.error('Failed to stop merchant mode:', error);\n          return false;\n        }\n      });\n      function stopMerchantMode() {\n        return _stopMerchantMode.apply(this, arguments);\n      }\n      return stopMerchantMode;\n    }())\n  }, {\n    key: \"scanForMerchants\",\n    value: (function () {\n      var _scanForMerchants = _asyncToGenerator(function* () {\n        var timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : BLUETOOTH_CONSTANTS.DISCOVERY_TIMEOUT;\n        try {\n          if (this.isScanning) {\n            yield this.stopScanForMerchants();\n          }\n          this.isScanning = true;\n          if (this.bleManager) {\n            var scanOptions = {\n              allowDuplicates: false,\n              scanMode: 2,\n              numberOfMatches: 0\n            };\n            yield this.bleManager.startDeviceScan([BLUETOOTH_CONSTANTS.SERVICE_UUID], scanOptions, this.handleDeviceDiscovery.bind(this));\n            console.log('BLE scanning started with options:', scanOptions);\n          } else {\n            console.log('Mock BLE scanning started');\n          }\n          console.log('Scanning for merchants...');\n          var mockMerchants = [{\n            id: 'merchant_1',\n            name: 'Coffee Shop',\n            address: 'addr1qx2fxv2umyhttkxyxp8x0dlpdt3k6cwng5pxj3jhsydzer3n0d3vllmyqwsx5wktcd8cc3sq835lu7drv2xwl2wywfgs',\n            distance: 2.5,\n            acceptedAmount: '5000000'\n          }, {\n            id: 'merchant_2',\n            name: 'Restaurant ABC',\n            address: 'addr1qy3fxv2umyhttkxyxp8x0dlpdt3k6cwng5pxj3jhsydzer3n0d3vllmyqwsx5wktcd8cc3sq835lu7drv2xwl2wywfgs',\n            distance: 10.2\n          }];\n          yield new Promise(function (resolve) {\n            return setTimeout(resolve, 2000);\n          });\n          this.isScanning = false;\n          return mockMerchants;\n        } catch (error) {\n          console.error('Failed to scan for merchants:', error);\n          this.isScanning = false;\n          return [];\n        }\n      });\n      function scanForMerchants() {\n        return _scanForMerchants.apply(this, arguments);\n      }\n      return scanForMerchants;\n    }())\n  }, {\n    key: \"stopScanForMerchants\",\n    value: (function () {\n      var _stopScanForMerchants = _asyncToGenerator(function* () {\n        try {\n          if (this.bleManager) {\n            try {\n              yield this.bleManager.stopDeviceScan();\n              console.log('BLE scanning stopped successfully');\n            } catch (stopError) {\n              console.warn('Failed to stop BLE scanning:', stopError);\n            }\n          } else {\n            console.log('Mock BLE scanning stopped');\n          }\n          this.isScanning = false;\n          console.log('Stopped scanning for merchants');\n          return true;\n        } catch (error) {\n          console.error('Failed to stop scanning:', error);\n          return false;\n        }\n      });\n      function stopScanForMerchants() {\n        return _stopScanForMerchants.apply(this, arguments);\n      }\n      return stopScanForMerchants;\n    }())\n  }, {\n    key: \"sendTransactionToMerchant\",\n    value: (function () {\n      var _sendTransactionToMerchant = _asyncToGenerator(function* (merchantId, signedTransaction, metadata) {\n        try {\n          if (this.bleManager) {\n            try {\n              var device = yield this.bleManager.connectToDevice(merchantId, {\n                timeout: 10000,\n                requestMTU: 512\n              });\n              yield device.discoverAllServicesAndCharacteristics();\n              this.connectedDevices.set(merchantId, device);\n              console.log('Successfully connected to BLE device:', merchantId);\n            } catch (connectError) {\n              console.error('Failed to connect to device:', connectError);\n              throw new Error('Device connection failed');\n            }\n          } else {\n            console.log('Mock BLE connection to merchant:', merchantId);\n            var mockDevice = this.createMockBLEDevice(merchantId);\n            this.connectedDevices.set(merchantId, mockDevice);\n          }\n          console.log('Connecting to merchant:', merchantId);\n          var bluetoothTx = {\n            id: `bt_tx_${Date.now()}`,\n            signedTx: signedTransaction,\n            metadata: {\n              amount: metadata.amount,\n              recipient: metadata.recipient,\n              timestamp: new Date()\n            }\n          };\n          yield new Promise(function (resolve) {\n            return setTimeout(resolve, 3000);\n          });\n          var merchantConfirmation = `confirmation_${Date.now()}`;\n          console.log('Transaction sent successfully to merchant');\n          return {\n            success: true,\n            merchantConfirmation: merchantConfirmation\n          };\n        } catch (error) {\n          console.error('Failed to send transaction to merchant:', error);\n          return {\n            success: false\n          };\n        }\n      });\n      function sendTransactionToMerchant(_x2, _x3, _x4) {\n        return _sendTransactionToMerchant.apply(this, arguments);\n      }\n      return sendTransactionToMerchant;\n    }())\n  }, {\n    key: \"startListeningForTransactions\",\n    value: (function () {\n      var _startListeningForTransactions = _asyncToGenerator(function* (onTransactionReceived) {\n        try {\n          if (this.bleManager) {\n            try {\n              var characteristic = yield this.setupTransactionCharacteristic();\n              var monitoringOptions = {\n                timeout: 5000,\n                retryAttempts: 3\n              };\n              yield characteristic.monitorCharacteristicForService(BLUETOOTH_CONSTANTS.SERVICE_UUID, BLUETOOTH_CONSTANTS.TX_CHARACTERISTIC_UUID, this.handleTransactionReceived.bind(this, onTransactionReceived), monitoringOptions);\n              console.log('BLE characteristic monitoring setup successfully');\n            } catch (monitorError) {\n              console.error('Failed to setup characteristic monitoring:', monitorError);\n              throw new Error('Characteristic monitoring setup failed');\n            }\n          } else {\n            console.log('Mock BLE characteristic monitoring setup');\n          }\n          console.log('Started listening for transactions');\n          setTimeout(function () {\n            var mockTransaction = {\n              id: 'bt_tx_received_123',\n              signedTx: 'signed_tx_data_here',\n              metadata: {\n                amount: '5000000',\n                recipient: 'addr1qx2fxv2umyhttkxyxp8x0dlpdt3k6cwng5pxj3jhsydzer3n0d3vllmyqwsx5wktcd8cc3sq835lu7drv2xwl2wywfgs',\n                timestamp: new Date()\n              }\n            };\n            onTransactionReceived(mockTransaction);\n          }, 5000);\n          return true;\n        } catch (error) {\n          console.error('Failed to start listening for transactions:', error);\n          return false;\n        }\n      });\n      function startListeningForTransactions(_x5) {\n        return _startListeningForTransactions.apply(this, arguments);\n      }\n      return startListeningForTransactions;\n    }())\n  }, {\n    key: \"stopListeningForTransactions\",\n    value: (function () {\n      var _stopListeningForTransactions = _asyncToGenerator(function* () {\n        try {\n          if (this.bleManager) {\n            try {\n              yield this.bleManager.stopMonitoringCharacteristicForService(BLUETOOTH_CONSTANTS.SERVICE_UUID, BLUETOOTH_CONSTANTS.TX_CHARACTERISTIC_UUID);\n              console.log('BLE characteristic monitoring stopped successfully');\n            } catch (stopError) {\n              console.warn('Failed to stop characteristic monitoring:', stopError);\n            }\n          } else {\n            console.log('Mock BLE characteristic monitoring stopped');\n          }\n          console.log('Stopped listening for transactions');\n          return true;\n        } catch (error) {\n          console.error('Failed to stop listening:', error);\n          return false;\n        }\n      });\n      function stopListeningForTransactions() {\n        return _stopListeningForTransactions.apply(this, arguments);\n      }\n      return stopListeningForTransactions;\n    }())\n  }, {\n    key: \"confirmTransactionReceived\",\n    value: (function () {\n      var _confirmTransactionReceived = _asyncToGenerator(function* (transactionId, customerId) {\n        try {\n          if (this.bleManager) {\n            try {\n              var device = this.connectedDevices.get(customerId);\n              if (device) {\n                var confirmationData = JSON.stringify({\n                  transactionId: transactionId,\n                  confirmed: true,\n                  timestamp: Date.now()\n                });\n                yield device.writeCharacteristicWithResponseForService(BLUETOOTH_CONSTANTS.SERVICE_UUID, BLUETOOTH_CONSTANTS.TX_CHARACTERISTIC_UUID, new Uint8Array(new TextEncoder().encode(confirmationData)));\n                console.log('Confirmation sent successfully to customer');\n              }\n            } catch (writeError) {\n              console.error('Failed to send confirmation:', writeError);\n              throw new Error('Confirmation sending failed');\n            }\n          } else {\n            console.log('Mock confirmation sent to customer:', customerId);\n          }\n          console.log('Confirmed transaction received:', transactionId);\n          return true;\n        } catch (error) {\n          console.error('Failed to confirm transaction:', error);\n          return false;\n        }\n      });\n      function confirmTransactionReceived(_x6, _x7) {\n        return _confirmTransactionReceived.apply(this, arguments);\n      }\n      return confirmTransactionReceived;\n    }())\n  }, {\n    key: \"getConnectedDevices\",\n    value: function getConnectedDevices() {\n      var devices = [];\n      this.connectedDevices.forEach(function (device, id) {\n        devices.push({\n          id: id,\n          name: `Device_${id}`,\n          type: 'customer',\n          connectedAt: new Date()\n        });\n      });\n      return devices;\n    }\n  }, {\n    key: \"disconnectDevice\",\n    value: (function () {\n      var _disconnectDevice = _asyncToGenerator(function* (deviceId) {\n        try {\n          if (this.bleManager) {\n            try {\n              var device = this.connectedDevices.get(deviceId);\n              if (device) {\n                yield device.cancelConnection();\n                console.log('BLE device disconnected successfully');\n              }\n            } catch (disconnectError) {\n              console.warn('Failed to disconnect BLE device:', disconnectError);\n            }\n          } else {\n            console.log('Mock BLE device disconnected:', deviceId);\n          }\n          this.connectedDevices.delete(deviceId);\n          console.log('Disconnected device:', deviceId);\n          return true;\n        } catch (error) {\n          console.error('Failed to disconnect device:', error);\n          return false;\n        }\n      });\n      function disconnectDevice(_x8) {\n        return _disconnectDevice.apply(this, arguments);\n      }\n      return disconnectDevice;\n    }())\n  }, {\n    key: \"cleanup\",\n    value: (function () {\n      var _cleanup = _asyncToGenerator(function* () {\n        try {\n          yield this.stopScanForMerchants();\n          yield this.stopMerchantMode();\n          yield this.stopListeningForTransactions();\n          this.connectedDevices.clear();\n          console.log('Bluetooth service cleaned up');\n          return true;\n        } catch (error) {\n          console.error('Failed to cleanup Bluetooth service:', error);\n          return false;\n        }\n      });\n      function cleanup() {\n        return _cleanup.apply(this, arguments);\n      }\n      return cleanup;\n    }())\n  }, {\n    key: \"createMockBLEManager\",\n    value: function createMockBLEManager() {\n      var _this = this;\n      return {\n        state: function () {\n          var _state = _asyncToGenerator(function* () {\n            return 'PoweredOn';\n          });\n          function state() {\n            return _state.apply(this, arguments);\n          }\n          return state;\n        }(),\n        requestPermissions: function () {\n          var _requestPermissions = _asyncToGenerator(function* () {\n            return true;\n          });\n          function requestPermissions() {\n            return _requestPermissions.apply(this, arguments);\n          }\n          return requestPermissions;\n        }(),\n        canAdvertise: function () {\n          var _canAdvertise = _asyncToGenerator(function* () {\n            return true;\n          });\n          function canAdvertise() {\n            return _canAdvertise.apply(this, arguments);\n          }\n          return canAdvertise;\n        }(),\n        startAdvertising: function () {\n          var _startAdvertising = _asyncToGenerator(function* () {\n            return console.log('Mock advertising started');\n          });\n          function startAdvertising() {\n            return _startAdvertising.apply(this, arguments);\n          }\n          return startAdvertising;\n        }(),\n        stopAdvertising: function () {\n          var _stopAdvertising = _asyncToGenerator(function* () {\n            return console.log('Mock advertising stopped');\n          });\n          function stopAdvertising() {\n            return _stopAdvertising.apply(this, arguments);\n          }\n          return stopAdvertising;\n        }(),\n        startDeviceScan: function () {\n          var _startDeviceScan = _asyncToGenerator(function* () {\n            return console.log('Mock scanning started');\n          });\n          function startDeviceScan() {\n            return _startDeviceScan.apply(this, arguments);\n          }\n          return startDeviceScan;\n        }(),\n        stopDeviceScan: function () {\n          var _stopDeviceScan = _asyncToGenerator(function* () {\n            return console.log('Mock scanning stopped');\n          });\n          function stopDeviceScan() {\n            return _stopDeviceScan.apply(this, arguments);\n          }\n          return stopDeviceScan;\n        }(),\n        connectToDevice: function () {\n          var _connectToDevice = _asyncToGenerator(function* () {\n            return _this.createMockBLEDevice('mock_device');\n          });\n          function connectToDevice() {\n            return _connectToDevice.apply(this, arguments);\n          }\n          return connectToDevice;\n        }(),\n        stopMonitoringCharacteristicForService: function () {\n          var _stopMonitoringCharacteristicForService = _asyncToGenerator(function* () {\n            return console.log('Mock monitoring stopped');\n          });\n          function stopMonitoringCharacteristicForService() {\n            return _stopMonitoringCharacteristicForService.apply(this, arguments);\n          }\n          return stopMonitoringCharacteristicForService;\n        }()\n      };\n    }\n  }, {\n    key: \"createMockBLEDevice\",\n    value: function createMockBLEDevice(deviceId) {\n      return {\n        discoverAllServicesAndCharacteristics: function () {\n          var _discoverAllServicesAndCharacteristics = _asyncToGenerator(function* () {\n            return console.log('Mock discovery completed');\n          });\n          function discoverAllServicesAndCharacteristics() {\n            return _discoverAllServicesAndCharacteristics.apply(this, arguments);\n          }\n          return discoverAllServicesAndCharacteristics;\n        }(),\n        services: function () {\n          var _services = _asyncToGenerator(function* () {\n            return [];\n          });\n          function services() {\n            return _services.apply(this, arguments);\n          }\n          return services;\n        }(),\n        characteristicsForService: function () {\n          var _characteristicsForService = _asyncToGenerator(function* () {\n            return [];\n          });\n          function characteristicsForService() {\n            return _characteristicsForService.apply(this, arguments);\n          }\n          return characteristicsForService;\n        }(),\n        writeCharacteristicWithResponseForService: function () {\n          var _writeCharacteristicWithResponseForService = _asyncToGenerator(function* () {\n            return console.log('Mock write completed');\n          });\n          function writeCharacteristicWithResponseForService() {\n            return _writeCharacteristicWithResponseForService.apply(this, arguments);\n          }\n          return writeCharacteristicWithResponseForService;\n        }(),\n        cancelConnection: function () {\n          var _cancelConnection = _asyncToGenerator(function* () {\n            return console.log('Mock disconnection completed');\n          });\n          function cancelConnection() {\n            return _cancelConnection.apply(this, arguments);\n          }\n          return cancelConnection;\n        }()\n      };\n    }\n  }, {\n    key: \"handleDeviceDiscovery\",\n    value: function handleDeviceDiscovery(error, device) {\n      if (error) {\n        console.error('Device discovery error:', error);\n        return;\n      }\n      if (device) {\n        console.log('Device discovered:', device);\n      }\n    }\n  }, {\n    key: \"setupTransactionCharacteristic\",\n    value: (function () {\n      var _setupTransactionCharacteristic = _asyncToGenerator(function* () {\n        return {\n          monitorCharacteristicForService: function () {\n            var _monitorCharacteristicForService = _asyncToGenerator(function* () {\n              return console.log('Mock monitoring started');\n            });\n            function monitorCharacteristicForService() {\n              return _monitorCharacteristicForService.apply(this, arguments);\n            }\n            return monitorCharacteristicForService;\n          }()\n        };\n      });\n      function setupTransactionCharacteristic() {\n        return _setupTransactionCharacteristic.apply(this, arguments);\n      }\n      return setupTransactionCharacteristic;\n    }())\n  }, {\n    key: \"handleTransactionReceived\",\n    value: function handleTransactionReceived(callback, error, characteristic) {\n      if (error) {\n        console.error('Transaction monitoring error:', error);\n        return;\n      }\n      if (characteristic && characteristic.value) {\n        try {\n          var transactionData = JSON.parse(characteristic.value);\n          callback(transactionData);\n        } catch (parseError) {\n          console.error('Failed to parse transaction data:', parseError);\n        }\n      }\n    }\n  }], [{\n    key: \"getInstance\",\n    value: function getInstance() {\n      if (!BluetoothTransferService.instance) {\n        BluetoothTransferService.instance = new BluetoothTransferService();\n      }\n      return BluetoothTransferService.instance;\n    }\n  }]);\n}();","map":{"version":3,"names":["BLUETOOTH_CONSTANTS","BluetoothTransferService","_classCallCheck","bleManager","isScanning","isAdvertising","connectedDevices","Map","_createClass","key","value","_initialize","_asyncToGenerator","console","log","startDeviceScan","error","device","createMockBLEManager","initialize","apply","arguments","_checkBluetoothStatus","bleState","state","permissions","requestPermissions","advertisingCapability","canAdvertise","isEnabled","hasPermission","checkBluetoothStatus","_startMerchantMode","merchantInfo","stopMerchantMode","advertisementData","serviceUUID","SERVICE_UUID","merchantName","name","merchantAddress","address","acceptedAmount","timestamp","Date","now","advertisingOptions","serviceUUIDs","manufacturerData","JSON","stringify","localName","txPowerLevel","startAdvertising","startMerchantMode","_x","_stopMerchantMode","stopAdvertising","stopError","warn","_scanForMerchants","timeout","length","undefined","DISCOVERY_TIMEOUT","stopScanForMerchants","scanOptions","allowDuplicates","scanMode","numberOfMatches","handleDeviceDiscovery","bind","mockMerchants","id","distance","Promise","resolve","setTimeout","scanForMerchants","_stopScanForMerchants","stopDeviceScan","_sendTransactionToMerchant","merchantId","signedTransaction","metadata","connectToDevice","requestMTU","discoverAllServicesAndCharacteristics","set","connectError","Error","mockDevice","createMockBLEDevice","bluetoothTx","signedTx","amount","recipient","merchantConfirmation","success","sendTransactionToMerchant","_x2","_x3","_x4","_startListeningForTransactions","onTransactionReceived","characteristic","setupTransactionCharacteristic","monitoringOptions","retryAttempts","monitorCharacteristicForService","TX_CHARACTERISTIC_UUID","handleTransactionReceived","monitorError","mockTransaction","startListeningForTransactions","_x5","_stopListeningForTransactions","stopMonitoringCharacteristicForService","stopListeningForTransactions","_confirmTransactionReceived","transactionId","customerId","get","confirmationData","confirmed","writeCharacteristicWithResponseForService","Uint8Array","TextEncoder","encode","writeError","confirmTransactionReceived","_x6","_x7","getConnectedDevices","devices","forEach","push","type","connectedAt","_disconnectDevice","deviceId","cancelConnection","disconnectError","delete","disconnectDevice","_x8","_cleanup","clear","cleanup","_this","_state","_requestPermissions","_canAdvertise","_startAdvertising","_stopAdvertising","_startDeviceScan","_stopDeviceScan","_connectToDevice","_stopMonitoringCharacteristicForService","_discoverAllServicesAndCharacteristics","services","_services","characteristicsForService","_characteristicsForService","_writeCharacteristicWithResponseForService","_cancelConnection","_setupTransactionCharacteristic","_monitorCharacteristicForService","callback","transactionData","parse","parseError","getInstance","instance"],"sources":["/Users/sonson/Documents/code/venera/X150-Valkyrie/src/services/BluetoothTransferService.ts"],"sourcesContent":["import { BluetoothTransaction, Transaction, TransactionStatus } from '../types/wallet';\nimport { BLUETOOTH_CONSTANTS } from '../constants/index';\n\n// BLE Manager interface for type safety\ninterface BLEManager {\n    state(): Promise<string>;\n    requestPermissions(): Promise<boolean>;\n    canAdvertise(): Promise<boolean>;\n    startAdvertising(options: any): Promise<void>;\n    stopAdvertising(): Promise<void>;\n    startDeviceScan(uuids: string[] | null, options: any, callback: (error: any, device: any) => void): Promise<void>;\n    stopDeviceScan(): Promise<void>;\n    connectToDevice(deviceId: string, options?: any): Promise<any>;\n    stopMonitoringCharacteristicForService(serviceUUID: string, characteristicUUID: string): Promise<void>;\n}\n\n// BLE Device interface\ninterface BLEDevice {\n    discoverAllServicesAndCharacteristics(): Promise<void>;\n    services(): Promise<any[]>;\n    characteristicsForService(serviceUUID: string): Promise<any[]>;\n    writeCharacteristicWithResponseForService(serviceUUID: string, characteristicUUID: string, data: Uint8Array): Promise<void>;\n    cancelConnection(): Promise<void>;\n}\n\n/**\n * Service xử lý truyền giao dịch qua Bluetooth khi offline\n * Cho phép ký transaction offline và gửi cho merchant để submit\n */\nexport class BluetoothTransferService {\n    private static instance: BluetoothTransferService;\n    private bleManager: BLEManager | null = null;\n    private isScanning: boolean = false;\n    private isAdvertising: boolean = false;\n    private connectedDevices: Map<string, BLEDevice> = new Map();\n\n    static getInstance(): BluetoothTransferService {\n        if (!BluetoothTransferService.instance) {\n            BluetoothTransferService.instance = new BluetoothTransferService();\n        }\n        return BluetoothTransferService.instance;\n    }\n\n    /**\n     * Khởi tạo Bluetooth service\n     * @returns Success status\n     */\n    async initialize(): Promise<boolean> {\n        try {\n            // Initialize BLE Manager cho React Native\n            // This would use react-native-ble-plx or similar library\n            console.log('Initializing Bluetooth service...');\n\n            // Implement with actual BLE library\n            // const BleManager = require('react-native-ble-plx').BleManager;\n            // this.bleManager = new BleManager();\n\n            // Initialize BLE manager with proper configuration\n            if (this.bleManager) {\n                await this.bleManager.startDeviceScan(null, null, (error, device) => {\n                    if (error) {\n                        console.error('BLE scan error:', error);\n                        return;\n                    }\n                    console.log('BLE device discovered:', device);\n                });\n            } else {\n                // Create mock BLE manager for development\n                this.bleManager = this.createMockBLEManager();\n                console.log('Mock BLE manager created for development');\n            }\n\n            console.log('Bluetooth service initialized');\n            return true;\n\n        } catch (error) {\n            console.error('Failed to initialize Bluetooth:', error);\n            return false;\n        }\n    }\n\n    /**\n     * Kiểm tra Bluetooth có available không\n     * @returns Bluetooth status\n     */\n    async checkBluetoothStatus(): Promise<{\n        isEnabled: boolean;\n        hasPermission: boolean;\n        canAdvertise: boolean;\n    }> {\n        try {\n            // Check actual Bluetooth status\n            // This would use the BLE manager to check real status\n            console.log('Checking Bluetooth status...');\n\n            // Implement with actual BLE manager\n            // const isEnabled = await this.bleManager.state() === 'PoweredOn';\n            // const hasPermission = await this.bleManager.requestPermissions();\n            // const canAdvertise = await this.bleManager.canAdvertise();\n\n            // Check BLE state and permissions\n            if (this.bleManager) {\n                const bleState = await this.bleManager.state();\n                const permissions = await this.bleManager.requestPermissions();\n                const advertisingCapability = await this.bleManager.canAdvertise();\n\n                return {\n                    isEnabled: bleState === 'PoweredOn',\n                    hasPermission: permissions,\n                    canAdvertise: advertisingCapability\n                };\n            }\n\n            // Fallback to mock data if BLE manager not available\n            return {\n                isEnabled: true,\n                hasPermission: true,\n                canAdvertise: true\n            };\n\n        } catch (error) {\n            console.error('Failed to check Bluetooth status:', error);\n            return {\n                isEnabled: false,\n                hasPermission: false,\n                canAdvertise: false\n            };\n        }\n    }\n\n    /**\n     * Bắt đầu advertise như một merchant (người bán)\n     * Để nhận giao dịch từ customer\n     * @param merchantInfo - Thông tin merchant\n     * @returns Success status\n     */\n    async startMerchantMode(merchantInfo: {\n        name: string;\n        address: string;\n        acceptedAmount?: string;\n    }): Promise<boolean> {\n        try {\n            if (this.isAdvertising) {\n                await this.stopMerchantMode();\n            }\n\n            // Start BLE advertising với service UUID\n            // Advertise thông tin merchant\n            const advertisementData = {\n                serviceUUID: BLUETOOTH_CONSTANTS.SERVICE_UUID,\n                merchantName: merchantInfo.name,\n                merchantAddress: merchantInfo.address,\n                acceptedAmount: merchantInfo.acceptedAmount || '',\n                timestamp: Date.now()\n            };\n\n            // Implement with actual BLE manager\n            // await this.bleManager.startAdvertising({\n            //     serviceUUIDs: [BLUETOOTH_CONSTANTS.SERVICE_UUID],\n            //     manufacturerData: JSON.stringify(advertisementData)\n            // });\n\n            // Start BLE advertising with proper configuration\n            if (this.bleManager) {\n                const advertisingOptions = {\n                    serviceUUIDs: [BLUETOOTH_CONSTANTS.SERVICE_UUID],\n                    manufacturerData: JSON.stringify(advertisementData),\n                    localName: merchantInfo.name,\n                    txPowerLevel: -12\n                };\n                await this.bleManager.startAdvertising(advertisingOptions);\n                console.log('BLE advertising started with options:', advertisingOptions);\n            } else {\n                console.log('Mock BLE advertising started for merchant:', merchantInfo.name);\n            }\n\n            console.log('Started merchant mode:', advertisementData);\n            this.isAdvertising = true;\n\n            return true;\n\n        } catch (error) {\n            console.error('Failed to start merchant mode:', error);\n            return false;\n        }\n    }\n\n    /**\n     * Dừng merchant mode\n     * @returns Success status\n     */\n    async stopMerchantMode(): Promise<boolean> {\n        try {\n            // Stop BLE advertising\n            // Implement with actual BLE manager\n            // await this.bleManager.stopAdvertising();\n\n            // Stop BLE advertising gracefully\n            if (this.bleManager) {\n                try {\n                    await this.bleManager.stopAdvertising();\n                    console.log('BLE advertising stopped successfully');\n                } catch (stopError) {\n                    console.warn('Failed to stop BLE advertising:', stopError);\n                }\n            } else {\n                console.log('Mock BLE advertising stopped');\n            }\n\n            console.log('Stopped merchant mode');\n            this.isAdvertising = false;\n\n            return true;\n\n        } catch (error) {\n            console.error('Failed to stop merchant mode:', error);\n            return false;\n        }\n    }\n\n    /**\n     * Scan tìm merchant gần đó (customer mode)\n     * @param timeout - Thời gian scan (ms)\n     * @returns Danh sách merchant tìm được\n     */\n    async scanForMerchants(timeout: number = BLUETOOTH_CONSTANTS.DISCOVERY_TIMEOUT): Promise<Array<{\n        id: string;\n        name: string;\n        address: string;\n        distance: number;\n        acceptedAmount?: string;\n    }>> {\n        try {\n            if (this.isScanning) {\n                await this.stopScanForMerchants();\n            }\n\n            this.isScanning = true;\n\n            // Start BLE scanning\n            // Implement with actual BLE manager\n            // await this.bleManager.startDeviceScan(\n            //     [BLUETOOTH_CONSTANTS.SERVICE_UUID],\n            //     { allowDuplicates: false },\n            //     (error, device) => {\n            //         if (error) {\n            //             console.error('Scan error:', error);\n            //             return;\n            //         }\n            //         if (device) {\n            //             // Process discovered device\n            //             console.log('Discovered device:', device);\n            //         }\n            //     }\n            // );\n\n            // Start BLE scanning with proper configuration\n            if (this.bleManager) {\n                const scanOptions = {\n                    allowDuplicates: false,\n                    scanMode: 2, // Low latency mode\n                    numberOfMatches: 0 // Unlimited matches\n                };\n                await this.bleManager.startDeviceScan(\n                    [BLUETOOTH_CONSTANTS.SERVICE_UUID],\n                    scanOptions,\n                    this.handleDeviceDiscovery.bind(this)\n                );\n                console.log('BLE scanning started with options:', scanOptions);\n            } else {\n                console.log('Mock BLE scanning started');\n            }\n\n            console.log('Scanning for merchants...');\n\n            // Mock merchants cho demo\n            const mockMerchants = [\n                {\n                    id: 'merchant_1',\n                    name: 'Coffee Shop',\n                    address: 'addr1qx2fxv2umyhttkxyxp8x0dlpdt3k6cwng5pxj3jhsydzer3n0d3vllmyqwsx5wktcd8cc3sq835lu7drv2xwl2wywfgs',\n                    distance: 2.5,\n                    acceptedAmount: '5000000' // 5 ADA\n                },\n                {\n                    id: 'merchant_2',\n                    name: 'Restaurant ABC',\n                    address: 'addr1qy3fxv2umyhttkxyxp8x0dlpdt3k6cwng5pxj3jhsydzer3n0d3vllmyqwsx5wktcd8cc3sq835lu7drv2xwl2wywfgs',\n                    distance: 10.2\n                }\n            ];\n\n            // Simulate scan delay\n            await new Promise(resolve => setTimeout(resolve, 2000));\n\n            this.isScanning = false;\n            return mockMerchants;\n\n        } catch (error) {\n            console.error('Failed to scan for merchants:', error);\n            this.isScanning = false;\n            return [];\n        }\n    }\n\n    /**\n     * Dừng scan merchant\n     * @returns Success status\n     */\n    async stopScanForMerchants(): Promise<boolean> {\n        try {\n            // Stop BLE scanning\n            // Implement with actual BLE manager\n            // await this.bleManager.stopDeviceScan();\n\n            // Stop BLE scanning gracefully\n            if (this.bleManager) {\n                try {\n                    await this.bleManager.stopDeviceScan();\n                    console.log('BLE scanning stopped successfully');\n                } catch (stopError) {\n                    console.warn('Failed to stop BLE scanning:', stopError);\n                }\n            } else {\n                console.log('Mock BLE scanning stopped');\n            }\n\n            this.isScanning = false;\n            console.log('Stopped scanning for merchants');\n\n            return true;\n\n        } catch (error) {\n            console.error('Failed to stop scanning:', error);\n            return false;\n        }\n    }\n\n    /**\n     * Gửi signed transaction tới merchant qua Bluetooth\n     * @param merchantId - ID của merchant\n     * @param signedTransaction - Transaction đã ký\n     * @param metadata - Metadata bổ sung\n     * @returns Success status\n     */\n    async sendTransactionToMerchant(\n        merchantId: string,\n        signedTransaction: string,\n        metadata: {\n            amount: string;\n            recipient: string;\n            note?: string;\n        }\n    ): Promise<{ success: boolean; merchantConfirmation?: string }> {\n        try {\n            // Connect tới merchant và gửi transaction\n            // Implement with actual BLE manager\n            // const device = await this.bleManager.connectToDevice(merchantId);\n            // await device.discoverAllServicesAndCharacteristics();\n            // const service = await device.services();\n            // const characteristic = await device.characteristicsForService(service[0].uuid);\n\n            // Connect to BLE device with proper error handling\n            if (this.bleManager) {\n                try {\n                    const device = await this.bleManager.connectToDevice(merchantId, {\n                        timeout: 10000,\n                        requestMTU: 512\n                    });\n                    await device.discoverAllServicesAndCharacteristics();\n                    this.connectedDevices.set(merchantId, device);\n                    console.log('Successfully connected to BLE device:', merchantId);\n                } catch (connectError) {\n                    console.error('Failed to connect to device:', connectError);\n                    throw new Error('Device connection failed');\n                }\n            } else {\n                console.log('Mock BLE connection to merchant:', merchantId);\n                // Create mock device for development\n                const mockDevice = this.createMockBLEDevice(merchantId);\n                this.connectedDevices.set(merchantId, mockDevice);\n            }\n\n            console.log('Connecting to merchant:', merchantId);\n\n            const bluetoothTx: BluetoothTransaction = {\n                id: `bt_tx_${Date.now()}`,\n                signedTx: signedTransaction,\n                metadata: {\n                    amount: metadata.amount,\n                    recipient: metadata.recipient,\n                    timestamp: new Date()\n                }\n            };\n\n            // Simulate Bluetooth transfer\n            await new Promise(resolve => setTimeout(resolve, 3000));\n\n            // Mock merchant confirmation\n            const merchantConfirmation = `confirmation_${Date.now()}`;\n\n            console.log('Transaction sent successfully to merchant');\n\n            return {\n                success: true,\n                merchantConfirmation\n            };\n\n        } catch (error) {\n            console.error('Failed to send transaction to merchant:', error);\n            return { success: false };\n        }\n    }\n\n    /**\n     * Nhận transaction từ customer (merchant side)\n     * @param onTransactionReceived - Callback khi nhận được transaction\n     * @returns Success status\n     */\n    async startListeningForTransactions(\n        onTransactionReceived: (transaction: BluetoothTransaction) => void\n    ): Promise<boolean> {\n        try {\n            // Setup BLE characteristic để nhận data\n            // Implement with actual BLE manager\n            // const characteristic = await this.setupTransactionCharacteristic();\n            // await characteristic.monitorCharacteristicForService(\n            //     BLUETOOTH_CONSTANTS.SERVICE_UUID,\n            //     BLUETOOTH_CONSTANTS.TRANSACTION_CHARACTERISTIC_UUID,\n            //     (error, characteristic) => {\n            //         if (error) {\n            //             console.error('Characteristic monitoring error:', error);\n            //             return;\n            //         }\n            //         if (characteristic && characteristic.value) {\n            //             const transactionData = characteristic.value;\n            //             onTransactionReceived(transactionData);\n            //         }\n            //     }\n            // );\n\n            // Setup BLE characteristic monitoring with proper configuration\n            if (this.bleManager) {\n                try {\n                    const characteristic = await this.setupTransactionCharacteristic();\n                    const monitoringOptions = {\n                        timeout: 5000,\n                        retryAttempts: 3\n                    };\n                    await characteristic.monitorCharacteristicForService(\n                        BLUETOOTH_CONSTANTS.SERVICE_UUID,\n                        BLUETOOTH_CONSTANTS.TX_CHARACTERISTIC_UUID,\n                        this.handleTransactionReceived.bind(this, onTransactionReceived),\n                        monitoringOptions\n                    );\n                    console.log('BLE characteristic monitoring setup successfully');\n                } catch (monitorError) {\n                    console.error('Failed to setup characteristic monitoring:', monitorError);\n                    throw new Error('Characteristic monitoring setup failed');\n                }\n            } else {\n                console.log('Mock BLE characteristic monitoring setup');\n            }\n\n            console.log('Started listening for transactions');\n\n            // Mock received transaction sau 5 giây\n            setTimeout(() => {\n                const mockTransaction: BluetoothTransaction = {\n                    id: 'bt_tx_received_123',\n                    signedTx: 'signed_tx_data_here',\n                    metadata: {\n                        amount: '5000000',\n                        recipient: 'addr1qx2fxv2umyhttkxyxp8x0dlpdt3k6cwng5pxj3jhsydzer3n0d3vllmyqwsx5wktcd8cc3sq835lu7drv2xwl2wywfgs',\n                        timestamp: new Date()\n                    }\n                };\n\n                onTransactionReceived(mockTransaction);\n            }, 5000);\n\n            return true;\n\n        } catch (error) {\n            console.error('Failed to start listening for transactions:', error);\n            return false;\n        }\n    }\n\n    /**\n     * Dừng lắng nghe transaction\n     * @returns Success status\n     */\n    async stopListeningForTransactions(): Promise<boolean> {\n        try {\n            // Stop BLE characteristic\n            // Implement with actual BLE manager\n            // await this.bleManager.stopMonitoringCharacteristicForService(\n            //     BLUETOOTH_CONSTANTS.SERVICE_UUID,\n            //     BLUETOOTH_CONSTANTS.TRANSACTION_CHARACTERISTIC_UUID\n            // );\n\n            // Stop BLE characteristic monitoring gracefully\n            if (this.bleManager) {\n                try {\n                    await this.bleManager.stopMonitoringCharacteristicForService(\n                        BLUETOOTH_CONSTANTS.SERVICE_UUID,\n                        BLUETOOTH_CONSTANTS.TX_CHARACTERISTIC_UUID\n                    );\n                    console.log('BLE characteristic monitoring stopped successfully');\n                } catch (stopError) {\n                    console.warn('Failed to stop characteristic monitoring:', stopError);\n                }\n            } else {\n                console.log('Mock BLE characteristic monitoring stopped');\n            }\n\n            console.log('Stopped listening for transactions');\n\n            return true;\n\n        } catch (error) {\n            console.error('Failed to stop listening:', error);\n            return false;\n        }\n    }\n\n    /**\n     * Xác nhận transaction đã được merchant nhận\n     * @param transactionId - ID của transaction\n     * @param customerId - ID của customer\n     * @returns Success status\n     */\n    async confirmTransactionReceived(\n        transactionId: string,\n        customerId: string\n    ): Promise<boolean> {\n        try {\n            // Gửi confirmation về customer\n            // Implement with actual BLE manager\n            // const device = this.connectedDevices.get(customerId);\n            // if (device) {\n            //     await device.writeCharacteristicWithResponseForService(\n            //         BLUETOOTH_CONSTANTS.SERVICE_UUID,\n            //         BLUETOOTH_CONSTANTS.CONFIRMATION_CHARACTERISTIC_UUID,\n            //         Buffer.from(JSON.stringify({ transactionId, confirmed: true }))\n            //     );\n            // }\n\n            // Send confirmation to customer via BLE\n            if (this.bleManager) {\n                try {\n                    const device = this.connectedDevices.get(customerId);\n                    if (device) {\n                        const confirmationData = JSON.stringify({\n                            transactionId,\n                            confirmed: true,\n                            timestamp: Date.now()\n                        });\n                        await device.writeCharacteristicWithResponseForService(\n                            BLUETOOTH_CONSTANTS.SERVICE_UUID,\n                            BLUETOOTH_CONSTANTS.TX_CHARACTERISTIC_UUID,\n                            new Uint8Array(new TextEncoder().encode(confirmationData))\n                        );\n                        console.log('Confirmation sent successfully to customer');\n                    }\n                } catch (writeError) {\n                    console.error('Failed to send confirmation:', writeError);\n                    throw new Error('Confirmation sending failed');\n                }\n            } else {\n                console.log('Mock confirmation sent to customer:', customerId);\n            }\n\n            console.log('Confirmed transaction received:', transactionId);\n\n            return true;\n\n        } catch (error) {\n            console.error('Failed to confirm transaction:', error);\n            return false;\n        }\n    }\n\n    /**\n     * Lấy danh sách devices đã kết nối\n     * @returns Connected devices\n     */\n    getConnectedDevices(): Array<{\n        id: string;\n        name: string;\n        type: 'merchant' | 'customer';\n        connectedAt: Date;\n    }> {\n        const devices: Array<{\n            id: string;\n            name: string;\n            type: 'merchant' | 'customer';\n            connectedAt: Date;\n        }> = [];\n\n        this.connectedDevices.forEach((device, id) => {\n            devices.push({\n                id,\n                name: `Device_${id}`,\n                type: 'customer',\n                connectedAt: new Date()\n            });\n        });\n\n        return devices;\n    }\n\n    /**\n     * Ngắt kết nối với device\n     * @param deviceId - ID của device\n     * @returns Success status\n     */\n    async disconnectDevice(deviceId: string): Promise<boolean> {\n        try {\n            // Disconnect BLE device\n            // Implement with actual BLE manager\n            // const device = this.connectedDevices.get(deviceId);\n            // if (device) {\n            //     await device.cancelConnection();\n            // }\n\n            // Disconnect BLE device gracefully\n            if (this.bleManager) {\n                try {\n                    const device = this.connectedDevices.get(deviceId);\n                    if (device) {\n                        await device.cancelConnection();\n                        console.log('BLE device disconnected successfully');\n                    }\n                } catch (disconnectError) {\n                    console.warn('Failed to disconnect BLE device:', disconnectError);\n                }\n            } else {\n                console.log('Mock BLE device disconnected:', deviceId);\n            }\n\n            this.connectedDevices.delete(deviceId);\n            console.log('Disconnected device:', deviceId);\n\n            return true;\n\n        } catch (error) {\n            console.error('Failed to disconnect device:', error);\n            return false;\n        }\n    }\n\n    /**\n     * Cleanup Bluetooth service\n     * @returns Success status\n     */\n    async cleanup(): Promise<boolean> {\n        try {\n            await this.stopScanForMerchants();\n            await this.stopMerchantMode();\n            await this.stopListeningForTransactions();\n\n            this.connectedDevices.clear();\n\n            console.log('Bluetooth service cleaned up');\n            return true;\n\n        } catch (error) {\n            console.error('Failed to cleanup Bluetooth service:', error);\n            return false;\n        }\n    }\n\n    /**\n     * Create mock BLE manager for development\n     */\n    private createMockBLEManager(): BLEManager {\n        return {\n            state: async () => 'PoweredOn',\n            requestPermissions: async () => true,\n            canAdvertise: async () => true,\n            startAdvertising: async () => console.log('Mock advertising started'),\n            stopAdvertising: async () => console.log('Mock advertising stopped'),\n            startDeviceScan: async () => console.log('Mock scanning started'),\n            stopDeviceScan: async () => console.log('Mock scanning stopped'),\n            connectToDevice: async () => this.createMockBLEDevice('mock_device'),\n            stopMonitoringCharacteristicForService: async () => console.log('Mock monitoring stopped')\n        };\n    }\n\n    /**\n     * Create mock BLE device for development\n     */\n    private createMockBLEDevice(deviceId: string): BLEDevice {\n        return {\n            discoverAllServicesAndCharacteristics: async () => console.log('Mock discovery completed'),\n            services: async () => [],\n            characteristicsForService: async () => [],\n            writeCharacteristicWithResponseForService: async () => console.log('Mock write completed'),\n            cancelConnection: async () => console.log('Mock disconnection completed')\n        };\n    }\n\n    /**\n     * Handle device discovery during scanning\n     */\n    private handleDeviceDiscovery(error: any, device: any): void {\n        if (error) {\n            console.error('Device discovery error:', error);\n            return;\n        }\n        if (device) {\n            console.log('Device discovered:', device);\n            // Process discovered device\n        }\n    }\n\n    /**\n     * Setup transaction characteristic for monitoring\n     */\n    private async setupTransactionCharacteristic(): Promise<any> {\n        // Mock characteristic for development\n        return {\n            monitorCharacteristicForService: async () => console.log('Mock monitoring started')\n        };\n    }\n\n    /**\n     * Handle transaction received via BLE\n     */\n    private handleTransactionReceived(callback: (transaction: BluetoothTransaction) => void, error: any, characteristic: any): void {\n        if (error) {\n            console.error('Transaction monitoring error:', error);\n            return;\n        }\n        if (characteristic && characteristic.value) {\n            try {\n                const transactionData = JSON.parse(characteristic.value);\n                callback(transactionData);\n            } catch (parseError) {\n                console.error('Failed to parse transaction data:', parseError);\n            }\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}