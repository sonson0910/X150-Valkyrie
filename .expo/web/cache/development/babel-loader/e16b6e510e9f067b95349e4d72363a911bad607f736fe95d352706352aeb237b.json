{"ast":null,"code":"console.log('Loading web polyfills...');\ntry {\n  if (typeof global === 'undefined') {\n    window.global = window;\n    console.log('Global polyfill applied');\n  }\n  if (typeof Buffer === 'undefined') {\n    window.Buffer = require('buffer').Buffer;\n    console.log('Buffer polyfill applied');\n  }\n  if (typeof process === 'undefined') {\n    window.process = require('process/browser');\n    console.log('Process polyfill applied');\n  }\n  if (typeof crypto === 'undefined') {\n    window.crypto = require('crypto-browserify');\n    console.log('Crypto polyfill applied');\n  }\n  if (typeof window.stream === 'undefined') {\n    window.stream = require('stream-browserify');\n    console.log('Stream polyfill applied');\n  }\n  if (typeof window.util === 'undefined') {\n    window.util = require('util');\n    console.log('Util polyfill applied');\n  }\n  if (typeof WebAssembly === 'undefined') {\n    console.warn('WebAssembly not supported');\n  } else {\n    console.log('WebAssembly supported');\n  }\n  console.log('Web polyfills loaded successfully');\n} catch (error) {\n  console.warn('Some polyfills failed to load:', error);\n}\nexport {};","map":{"version":3,"names":["console","log","global","window","Buffer","require","process","crypto","stream","util","WebAssembly","warn","error"],"sources":["/Users/sonson/Documents/code/venera/X150-Valkyrie/src/polyfills/web-polyfills.ts"],"sourcesContent":["// Web polyfills for Cardano wallet compatibility\n\nconsole.log('Loading web polyfills...');\n\ntry {\n    // Buffer polyfill\n    if (typeof global === 'undefined') {\n        (window as any).global = window;\n        console.log('Global polyfill applied');\n    }\n\n    if (typeof Buffer === 'undefined') {\n        (window as any).Buffer = require('buffer').Buffer;\n        console.log('Buffer polyfill applied');\n    }\n\n    // MIME type polyfill\n    if (typeof process === 'undefined') {\n        (window as any).process = require('process/browser');\n        console.log('Process polyfill applied');\n    }\n\n    // Crypto polyfill\n    if (typeof crypto === 'undefined') {\n        (window as any).crypto = require('crypto-browserify');\n        console.log('Crypto polyfill applied');\n    }\n\n    // Stream polyfill\n    if (typeof (window as any).stream === 'undefined') {\n        (window as any).stream = require('stream-browserify');\n        console.log('Stream polyfill applied');\n    }\n\n    // Util polyfill\n    if (typeof (window as any).util === 'undefined') {\n        (window as any).util = require('util');\n        console.log('Util polyfill applied');\n    }\n\n    // Fix for Cardano serialization lib\n    if (typeof WebAssembly === 'undefined') {\n        console.warn('WebAssembly not supported');\n    } else {\n        console.log('WebAssembly supported');\n    }\n\n    console.log('Web polyfills loaded successfully');\n} catch (error) {\n    console.warn('Some polyfills failed to load:', error);\n    // Continue anyway\n}\n\n// Export for use in other files\nexport { };\n"],"mappings":"AAEAA,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;AAEvC,IAAI;EAEA,IAAI,OAAOC,MAAM,KAAK,WAAW,EAAE;IAC9BC,MAAM,CAASD,MAAM,GAAGC,MAAM;IAC/BH,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;EAC1C;EAEA,IAAI,OAAOG,MAAM,KAAK,WAAW,EAAE;IAC9BD,MAAM,CAASC,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC,CAACD,MAAM;IACjDJ,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;EAC1C;EAGA,IAAI,OAAOK,OAAO,KAAK,WAAW,EAAE;IAC/BH,MAAM,CAASG,OAAO,GAAGD,OAAO,CAAC,iBAAiB,CAAC;IACpDL,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;EAC3C;EAGA,IAAI,OAAOM,MAAM,KAAK,WAAW,EAAE;IAC9BJ,MAAM,CAASI,MAAM,GAAGF,OAAO,CAAC,mBAAmB,CAAC;IACrDL,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;EAC1C;EAGA,IAAI,OAAQE,MAAM,CAASK,MAAM,KAAK,WAAW,EAAE;IAC9CL,MAAM,CAASK,MAAM,GAAGH,OAAO,CAAC,mBAAmB,CAAC;IACrDL,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;EAC1C;EAGA,IAAI,OAAQE,MAAM,CAASM,IAAI,KAAK,WAAW,EAAE;IAC5CN,MAAM,CAASM,IAAI,GAAGJ,OAAO,CAAC,MAAM,CAAC;IACtCL,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;EACxC;EAGA,IAAI,OAAOS,WAAW,KAAK,WAAW,EAAE;IACpCV,OAAO,CAACW,IAAI,CAAC,2BAA2B,CAAC;EAC7C,CAAC,MAAM;IACHX,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;EACxC;EAEAD,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;AACpD,CAAC,CAAC,OAAOW,KAAK,EAAE;EACZZ,OAAO,CAACW,IAAI,CAAC,gCAAgC,EAAEC,KAAK,CAAC;AAEzD;AAGA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}