{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nexport var PerformanceMonitor = function () {\n  function PerformanceMonitor() {\n    _classCallCheck(this, PerformanceMonitor);\n    this.metrics = new Map();\n    this.isEnabled = __DEV__;\n    this.slowOperationThreshold = 1000;\n  }\n  return _createClass(PerformanceMonitor, [{\n    key: \"startOperation\",\n    value: function startOperation(name, metadata) {\n      if (!this.isEnabled) return '';\n      var operationId = `${name}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      this.metrics.set(operationId, {\n        name: name,\n        startTime: performance.now(),\n        metadata: metadata\n      });\n      return operationId;\n    }\n  }, {\n    key: \"endOperation\",\n    value: function endOperation(operationId) {\n      var _this = this;\n      if (!this.isEnabled || !operationId) return;\n      var metric = this.metrics.get(operationId);\n      if (!metric) return;\n      metric.endTime = performance.now();\n      metric.duration = metric.endTime - metric.startTime;\n      if (metric.duration > this.slowOperationThreshold) {\n        console.warn(`Slow operation detected: ${metric.name} took ${metric.duration.toFixed(2)}ms`, metric.metadata);\n      }\n      if (this.metrics.size > 100) {\n        var oldestKeys = Array.from(this.metrics.keys()).slice(0, this.metrics.size - 100);\n        oldestKeys.forEach(function (key) {\n          return _this.metrics.delete(key);\n        });\n      }\n    }\n  }, {\n    key: \"measureAsync\",\n    value: (function () {\n      var _measureAsync = _asyncToGenerator(function* (name, fn, metadata) {\n        var operationId = this.startOperation(name, metadata);\n        try {\n          var result = yield fn();\n          return result;\n        } finally {\n          this.endOperation(operationId);\n        }\n      });\n      function measureAsync(_x, _x2, _x3) {\n        return _measureAsync.apply(this, arguments);\n      }\n      return measureAsync;\n    }())\n  }, {\n    key: \"measureSync\",\n    value: function measureSync(name, fn, metadata) {\n      var operationId = this.startOperation(name, metadata);\n      try {\n        var result = fn();\n        return result;\n      } finally {\n        this.endOperation(operationId);\n      }\n    }\n  }, {\n    key: \"getPerformanceReport\",\n    value: function getPerformanceReport() {\n      var metrics = Array.from(this.metrics.values()).filter(function (m) {\n        return m.duration !== undefined;\n      });\n      if (metrics.length === 0) {\n        return {\n          totalMetrics: 0,\n          averageDuration: 0,\n          slowestOperation: null,\n          fastestOperation: null,\n          operationsByDuration: []\n        };\n      }\n      var totalDuration = metrics.reduce(function (sum, m) {\n        return sum + (m.duration || 0);\n      }, 0);\n      var averageDuration = totalDuration / metrics.length;\n      var sortedByDuration = _toConsumableArray(metrics).sort(function (a, b) {\n        return (b.duration || 0) - (a.duration || 0);\n      });\n      return {\n        totalMetrics: metrics.length,\n        averageDuration: averageDuration,\n        slowestOperation: sortedByDuration[0] || null,\n        fastestOperation: sortedByDuration[sortedByDuration.length - 1] || null,\n        operationsByDuration: sortedByDuration\n      };\n    }\n  }, {\n    key: \"getOperationMetrics\",\n    value: function getOperationMetrics(operationName) {\n      return Array.from(this.metrics.values()).filter(function (m) {\n        return m.name === operationName && m.duration !== undefined;\n      });\n    }\n  }, {\n    key: \"getAverageOperationDuration\",\n    value: function getAverageOperationDuration(operationName) {\n      var metrics = this.getOperationMetrics(operationName);\n      if (metrics.length === 0) return 0;\n      var totalDuration = metrics.reduce(function (sum, m) {\n        return sum + (m.duration || 0);\n      }, 0);\n      return totalDuration / metrics.length;\n    }\n  }, {\n    key: \"setEnabled\",\n    value: function setEnabled(enabled) {\n      this.isEnabled = enabled;\n      console.log(`Performance monitoring ${enabled ? 'enabled' : 'disabled'}`);\n    }\n  }, {\n    key: \"setSlowOperationThreshold\",\n    value: function setSlowOperationThreshold(threshold) {\n      this.slowOperationThreshold = threshold;\n    }\n  }, {\n    key: \"clearMetrics\",\n    value: function clearMetrics() {\n      this.metrics.clear();\n    }\n  }, {\n    key: \"exportMetrics\",\n    value: function exportMetrics() {\n      return Array.from(this.metrics.values());\n    }\n  }], [{\n    key: \"getInstance\",\n    value: function getInstance() {\n      if (!PerformanceMonitor.instance) {\n        PerformanceMonitor.instance = new PerformanceMonitor();\n      }\n      return PerformanceMonitor.instance;\n    }\n  }]);\n}();\nexport var performanceMonitor = PerformanceMonitor.getInstance();","map":{"version":3,"names":["PerformanceMonitor","_classCallCheck","metrics","Map","isEnabled","__DEV__","slowOperationThreshold","_createClass","key","value","startOperation","name","metadata","operationId","Date","now","Math","random","toString","substr","set","startTime","performance","endOperation","_this","metric","get","endTime","duration","console","warn","toFixed","size","oldestKeys","Array","from","keys","slice","forEach","delete","_measureAsync","_asyncToGenerator","fn","result","measureAsync","_x","_x2","_x3","apply","arguments","measureSync","getPerformanceReport","values","filter","m","undefined","length","totalMetrics","averageDuration","slowestOperation","fastestOperation","operationsByDuration","totalDuration","reduce","sum","sortedByDuration","_toConsumableArray","sort","a","b","getOperationMetrics","operationName","getAverageOperationDuration","setEnabled","enabled","log","setSlowOperationThreshold","threshold","clearMetrics","clear","exportMetrics","getInstance","instance","performanceMonitor"],"sources":["/Users/sonson/Documents/code/venera/X150-Valkyrie/src/services/PerformanceMonitor.ts"],"sourcesContent":["interface PerformanceMetric {\n    name: string;\n    startTime: number;\n    endTime?: number;\n    duration?: number;\n    metadata?: Record<string, any>;\n}\n\ninterface PerformanceReport {\n    totalMetrics: number;\n    averageDuration: number;\n    slowestOperation: PerformanceMetric | null;\n    fastestOperation: PerformanceMetric | null;\n    operationsByDuration: PerformanceMetric[];\n}\n\nexport class PerformanceMonitor {\n    private static instance: PerformanceMonitor;\n    private metrics: Map<string, PerformanceMetric> = new Map();\n    private isEnabled: boolean = __DEV__; // Enable in development by default\n    private slowOperationThreshold: number = 1000; // 1 second\n\n    static getInstance(): PerformanceMonitor {\n        if (!PerformanceMonitor.instance) {\n            PerformanceMonitor.instance = new PerformanceMonitor();\n        }\n        return PerformanceMonitor.instance;\n    }\n\n    /**\n     * Bắt đầu đo performance của một operation\n     */\n    startOperation(name: string, metadata?: Record<string, any>): string {\n        if (!this.isEnabled) return '';\n\n        const operationId = `${name}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n        this.metrics.set(operationId, {\n            name,\n            startTime: performance.now(),\n            metadata\n        });\n\n        return operationId;\n    }\n\n    /**\n     * Kết thúc đo performance của một operation\n     */\n    endOperation(operationId: string): void {\n        if (!this.isEnabled || !operationId) return;\n\n        const metric = this.metrics.get(operationId);\n        if (!metric) return;\n\n        metric.endTime = performance.now();\n        metric.duration = metric.endTime - metric.startTime;\n\n        // Log slow operations\n        if (metric.duration > this.slowOperationThreshold) {\n            console.warn(`Slow operation detected: ${metric.name} took ${metric.duration.toFixed(2)}ms`, metric.metadata);\n        }\n\n        // Clean up old metrics (keep only last 100)\n        if (this.metrics.size > 100) {\n            const oldestKeys = Array.from(this.metrics.keys()).slice(0, this.metrics.size - 100);\n            oldestKeys.forEach(key => this.metrics.delete(key));\n        }\n    }\n\n    /**\n     * Đo performance của một async function\n     */\n    async measureAsync<T>(\n        name: string,\n        fn: () => Promise<T>,\n        metadata?: Record<string, any>\n    ): Promise<T> {\n        const operationId = this.startOperation(name, metadata);\n\n        try {\n            const result = await fn();\n            return result;\n        } finally {\n            this.endOperation(operationId);\n        }\n    }\n\n    /**\n     * Đo performance của một sync function\n     */\n    measureSync<T>(\n        name: string,\n        fn: () => T,\n        metadata?: Record<string, any>\n    ): T {\n        const operationId = this.startOperation(name, metadata);\n\n        try {\n            const result = fn();\n            return result;\n        } finally {\n            this.endOperation(operationId);\n        }\n    }\n\n    /**\n     * Lấy performance report\n     */\n    getPerformanceReport(): PerformanceReport {\n        const metrics = Array.from(this.metrics.values()).filter(m => m.duration !== undefined);\n\n        if (metrics.length === 0) {\n            return {\n                totalMetrics: 0,\n                averageDuration: 0,\n                slowestOperation: null,\n                fastestOperation: null,\n                operationsByDuration: []\n            };\n        }\n\n        const totalDuration = metrics.reduce((sum, m) => sum + (m.duration || 0), 0);\n        const averageDuration = totalDuration / metrics.length;\n\n        const sortedByDuration = [...metrics].sort((a, b) => (b.duration || 0) - (a.duration || 0));\n\n        return {\n            totalMetrics: metrics.length,\n            averageDuration,\n            slowestOperation: sortedByDuration[0] || null,\n            fastestOperation: sortedByDuration[sortedByDuration.length - 1] || null,\n            operationsByDuration: sortedByDuration\n        };\n    }\n\n    /**\n     * Lấy metrics cho một operation cụ thể\n     */\n    getOperationMetrics(operationName: string): PerformanceMetric[] {\n        return Array.from(this.metrics.values())\n            .filter(m => m.name === operationName && m.duration !== undefined);\n    }\n\n    /**\n     * Lấy average duration cho một operation\n     */\n    getAverageOperationDuration(operationName: string): number {\n        const metrics = this.getOperationMetrics(operationName);\n        if (metrics.length === 0) return 0;\n\n        const totalDuration = metrics.reduce((sum, m) => sum + (m.duration || 0), 0);\n        return totalDuration / metrics.length;\n    }\n\n    /**\n     * Enable/disable performance monitoring\n     */\n    setEnabled(enabled: boolean): void {\n        this.isEnabled = enabled;\n        console.log(`Performance monitoring ${enabled ? 'enabled' : 'disabled'}`);\n    }\n\n    /**\n     * Set threshold cho slow operations\n     */\n    setSlowOperationThreshold(threshold: number): void {\n        this.slowOperationThreshold = threshold;\n    }\n\n    /**\n     * Clear tất cả metrics\n     */\n    clearMetrics(): void {\n        this.metrics.clear();\n    }\n\n    /**\n     * Export metrics để debug\n     */\n    exportMetrics(): PerformanceMetric[] {\n        return Array.from(this.metrics.values());\n    }\n}\n\n// Export singleton instance\nexport const performanceMonitor = PerformanceMonitor.getInstance();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}