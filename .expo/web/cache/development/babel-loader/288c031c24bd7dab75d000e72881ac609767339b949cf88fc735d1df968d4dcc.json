{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport CryptoJS from 'crypto-js';\nexport var MnemonicEncryptionService = function () {\n  function MnemonicEncryptionService() {\n    _classCallCheck(this, MnemonicEncryptionService);\n  }\n  return _createClass(MnemonicEncryptionService, null, [{\n    key: \"encryptMnemonic\",\n    value: (function () {\n      var _encryptMnemonic = _asyncToGenerator(function* (originalMnemonic, userPassword) {\n        try {\n          var salt = CryptoJS.lib.WordArray.random(this.SALT_SIZE / 8);\n          var key = CryptoJS.PBKDF2(userPassword, salt, {\n            keySize: this.KEY_SIZE / 32,\n            iterations: this.ITERATIONS\n          });\n          var iv = CryptoJS.lib.WordArray.random(16);\n          var encrypted = CryptoJS.AES.encrypt(originalMnemonic, key, {\n            iv: iv,\n            mode: CryptoJS.mode.CBC,\n            padding: CryptoJS.pad.Pkcs7\n          });\n          var fakeMnemonic = this.generateFakeMnemonic();\n          return {\n            encryptedData: encrypted.toString(),\n            salt: salt.toString(),\n            iv: iv.toString(),\n            fakeMnemonic: fakeMnemonic,\n            algorithm: 'AES-256-CBC',\n            iterations: this.ITERATIONS,\n            keySize: this.KEY_SIZE,\n            timestamp: new Date().toISOString()\n          };\n        } catch (error) {\n          console.error('Failed to encrypt mnemonic:', error);\n          throw new Error('Encryption failed');\n        }\n      });\n      function encryptMnemonic(_x, _x2) {\n        return _encryptMnemonic.apply(this, arguments);\n      }\n      return encryptMnemonic;\n    }())\n  }, {\n    key: \"decryptMnemonic\",\n    value: (function () {\n      var _decryptMnemonic = _asyncToGenerator(function* (encryptedData, userPassword) {\n        try {\n          var key = CryptoJS.PBKDF2(userPassword, encryptedData.salt, {\n            keySize: encryptedData.keySize / 32,\n            iterations: encryptedData.iterations\n          });\n          var decrypted = CryptoJS.AES.decrypt(encryptedData.encryptedData, key, {\n            iv: CryptoJS.enc.Hex.parse(encryptedData.iv),\n            mode: CryptoJS.mode.CBC,\n            padding: CryptoJS.pad.Pkcs7\n          });\n          var originalMnemonic = decrypted.toString(CryptoJS.enc.Utf8);\n          if (!originalMnemonic) {\n            throw new Error('Invalid password or corrupted data');\n          }\n          return originalMnemonic;\n        } catch (error) {\n          console.error('Failed to decrypt mnemonic:', error);\n          throw new Error('Decryption failed - check your password');\n        }\n      });\n      function decryptMnemonic(_x3, _x4) {\n        return _decryptMnemonic.apply(this, arguments);\n      }\n      return decryptMnemonic;\n    }())\n  }, {\n    key: \"generateFakeMnemonic\",\n    value: function generateFakeMnemonic() {\n      var fakeWords = ['abandon', 'ability', 'able', 'about', 'above', 'absent', 'absorb', 'abstract', 'absurd', 'abuse', 'access', 'accident', 'account', 'accuse', 'achieve', 'acid', 'acoustic', 'acquire', 'across', 'act', 'action', 'actor', 'actual', 'adapt', 'add', 'addict', 'address', 'adjust', 'admit', 'adult', 'advance', 'advice'];\n      var fakeMnemonic = [];\n      for (var i = 0; i < 24; i++) {\n        var randomIndex = Math.floor(Math.random() * fakeWords.length);\n        fakeMnemonic.push(fakeWords[randomIndex]);\n      }\n      return fakeMnemonic.join(' ');\n    }\n  }, {\n    key: \"isValidMnemonic\",\n    value: function isValidMnemonic(mnemonic) {\n      if (!mnemonic || typeof mnemonic !== 'string') {\n        return false;\n      }\n      var words = mnemonic.trim().split(/\\s+/);\n      if (![12, 15, 18, 21, 24].includes(words.length)) {\n        return false;\n      }\n      return words.every(function (word) {\n        return word && word.length > 0 && /^[a-z]+$/.test(word);\n      });\n    }\n  }, {\n    key: \"hashMnemonic\",\n    value: function hashMnemonic(mnemonic) {\n      return CryptoJS.SHA256(mnemonic).toString();\n    }\n  }, {\n    key: \"compareMnemonics\",\n    value: function compareMnemonics(mnemonic1, mnemonic2) {\n      var hash1 = this.hashMnemonic(mnemonic1);\n      var hash2 = this.hashMnemonic(mnemonic2);\n      return hash1 === hash2;\n    }\n  }]);\n}();\nMnemonicEncryptionService.ITERATIONS = 100000;\nMnemonicEncryptionService.KEY_SIZE = 256;\nMnemonicEncryptionService.SALT_SIZE = 128;","map":{"version":3,"names":["CryptoJS","MnemonicEncryptionService","_classCallCheck","_createClass","key","value","_encryptMnemonic","_asyncToGenerator","originalMnemonic","userPassword","salt","lib","WordArray","random","SALT_SIZE","PBKDF2","keySize","KEY_SIZE","iterations","ITERATIONS","iv","encrypted","AES","encrypt","mode","CBC","padding","pad","Pkcs7","fakeMnemonic","generateFakeMnemonic","encryptedData","toString","algorithm","timestamp","Date","toISOString","error","console","Error","encryptMnemonic","_x","_x2","apply","arguments","_decryptMnemonic","decrypted","decrypt","enc","Hex","parse","Utf8","decryptMnemonic","_x3","_x4","fakeWords","i","randomIndex","Math","floor","length","push","join","isValidMnemonic","mnemonic","words","trim","split","includes","every","word","test","hashMnemonic","SHA256","compareMnemonics","mnemonic1","mnemonic2","hash1","hash2"],"sources":["/Users/sonson/Documents/code/venera/X150-Valkyrie/src/services/MnemonicEncryptionService.ts"],"sourcesContent":["import CryptoJS from 'crypto-js';\nimport { EncryptedMnemonic } from '../types/wallet';\n\n/**\n * Service mã hóa và giải mã mnemonic phrase\n * Sử dụng PBKDF2 và AES-256 để bảo mật\n */\nexport class MnemonicEncryptionService {\n    private static readonly ITERATIONS = 100000;\n    private static readonly KEY_SIZE = 256;\n    private static readonly SALT_SIZE = 128;\n\n    /**\n     * Mã hóa mnemonic gốc thành chuỗi mã hóa\n     * @param originalMnemonic - Mnemonic gốc\n     * @param userPassword - Mật khẩu người dùng\n     * @returns EncryptedMnemonic object\n     */\n    static async encryptMnemonic(\n        originalMnemonic: string,\n        userPassword: string\n    ): Promise<EncryptedMnemonic> {\n        try {\n            // Tạo salt ngẫu nhiên\n            const salt = CryptoJS.lib.WordArray.random(this.SALT_SIZE / 8);\n\n            // Tạo key từ password sử dụng PBKDF2\n            const key = CryptoJS.PBKDF2(userPassword, salt, {\n                keySize: this.KEY_SIZE / 32,\n                iterations: this.ITERATIONS\n            });\n\n            // Tạo IV ngẫu nhiên\n            const iv = CryptoJS.lib.WordArray.random(16);\n\n            // Mã hóa mnemonic với AES-256\n            const encrypted = CryptoJS.AES.encrypt(originalMnemonic, key, {\n                iv: iv,\n                mode: CryptoJS.mode.CBC,\n                padding: CryptoJS.pad.Pkcs7\n            });\n\n            // Tạo fake mnemonic để hiển thị\n            const fakeMnemonic = this.generateFakeMnemonic();\n\n            return {\n                encryptedData: encrypted.toString(),\n                salt: salt.toString(),\n                iv: iv.toString(),\n                fakeMnemonic,\n                algorithm: 'AES-256-CBC',\n                iterations: this.ITERATIONS,\n                keySize: this.KEY_SIZE,\n                timestamp: new Date().toISOString()\n            };\n\n        } catch (error) {\n            console.error('Failed to encrypt mnemonic:', error);\n            throw new Error('Encryption failed');\n        }\n    }\n\n    /**\n     * Giải mã chuỗi mã hóa về mnemonic gốc\n     * @param encryptedData - Dữ liệu đã mã hóa\n     * @param userPassword - Mật khẩu người dùng\n     * @returns Mnemonic gốc\n     */\n    static async decryptMnemonic(\n        encryptedData: EncryptedMnemonic,\n        userPassword: string\n    ): Promise<string> {\n        try {\n            // Tạo key từ password và salt\n            const key = CryptoJS.PBKDF2(userPassword, encryptedData.salt, {\n                keySize: encryptedData.keySize / 32,\n                iterations: encryptedData.iterations\n            });\n\n            // Giải mã với AES-256\n            const decrypted = CryptoJS.AES.decrypt(encryptedData.encryptedData, key, {\n                iv: CryptoJS.enc.Hex.parse(encryptedData.iv),\n                mode: CryptoJS.mode.CBC,\n                padding: CryptoJS.pad.Pkcs7\n            });\n\n            const originalMnemonic = decrypted.toString(CryptoJS.enc.Utf8);\n\n            if (!originalMnemonic) {\n                throw new Error('Invalid password or corrupted data');\n            }\n\n            return originalMnemonic;\n\n        } catch (error) {\n            console.error('Failed to decrypt mnemonic:', error);\n            throw new Error('Decryption failed - check your password');\n        }\n    }\n\n    /**\n     * Tạo fake mnemonic để hiển thị (không phải mnemonic thật)\n     * @returns Fake mnemonic string\n     */\n    static generateFakeMnemonic(): string {\n        const fakeWords = [\n            'abandon', 'ability', 'able', 'about', 'above', 'absent', 'absorb', 'abstract',\n            'absurd', 'abuse', 'access', 'accident', 'account', 'accuse', 'achieve', 'acid',\n            'acoustic', 'acquire', 'across', 'act', 'action', 'actor', 'actual', 'adapt',\n            'add', 'addict', 'address', 'adjust', 'admit', 'adult', 'advance', 'advice'\n        ];\n\n        const fakeMnemonic = [];\n        for (let i = 0; i < 24; i++) {\n            const randomIndex = Math.floor(Math.random() * fakeWords.length);\n            fakeMnemonic.push(fakeWords[randomIndex]);\n        }\n\n        return fakeMnemonic.join(' ');\n    }\n\n    /**\n     * Kiểm tra xem mnemonic có hợp lệ không\n     * @param mnemonic - Mnemonic cần kiểm tra\n     * @returns true nếu hợp lệ\n     */\n    static isValidMnemonic(mnemonic: string): boolean {\n        if (!mnemonic || typeof mnemonic !== 'string') {\n            return false;\n        }\n\n        const words = mnemonic.trim().split(/\\s+/);\n\n        // Kiểm tra độ dài (12, 15, 18, 21, 24 words)\n        if (![12, 15, 18, 21, 24].includes(words.length)) {\n            return false;\n        }\n\n        // Kiểm tra mỗi word có phải là string hợp lệ không\n        return words.every(word =>\n            word &&\n            word.length > 0 &&\n            /^[a-z]+$/.test(word)\n        );\n    }\n\n    /**\n     * Tạo hash của mnemonic để so sánh\n     * @param mnemonic - Mnemonic cần hash\n     * @returns Hash string\n     */\n    static hashMnemonic(mnemonic: string): string {\n        return CryptoJS.SHA256(mnemonic).toString();\n    }\n\n    /**\n     * So sánh hai mnemonic có giống nhau không\n     * @param mnemonic1 - Mnemonic thứ nhất\n     * @param mnemonic2 - Mnemonic thứ hai\n     * @returns true nếu giống nhau\n     */\n    static compareMnemonics(mnemonic1: string, mnemonic2: string): boolean {\n        const hash1 = this.hashMnemonic(mnemonic1);\n        const hash2 = this.hashMnemonic(mnemonic2);\n        return hash1 === hash2;\n    }\n}\n"],"mappings":";;;AAAA,OAAOA,QAAQ,MAAM,WAAW;AAOhC,WAAaC,yBAAyB;EAAA,SAAAA,0BAAA;IAAAC,eAAA,OAAAD,yBAAA;EAAA;EAAA,OAAAE,YAAA,CAAAF,yBAAA;IAAAG,GAAA;IAAAC,KAAA;MAAA,IAAAC,gBAAA,GAAAC,iBAAA,CAWlC,WACIC,gBAAwB,EACxBC,YAAoB,EACM;QAC1B,IAAI;UAEA,IAAMC,IAAI,GAAGV,QAAQ,CAACW,GAAG,CAACC,SAAS,CAACC,MAAM,CAAC,IAAI,CAACC,SAAS,GAAG,CAAC,CAAC;UAG9D,IAAMV,GAAG,GAAGJ,QAAQ,CAACe,MAAM,CAACN,YAAY,EAAEC,IAAI,EAAE;YAC5CM,OAAO,EAAE,IAAI,CAACC,QAAQ,GAAG,EAAE;YAC3BC,UAAU,EAAE,IAAI,CAACC;UACrB,CAAC,CAAC;UAGF,IAAMC,EAAE,GAAGpB,QAAQ,CAACW,GAAG,CAACC,SAAS,CAACC,MAAM,CAAC,EAAE,CAAC;UAG5C,IAAMQ,SAAS,GAAGrB,QAAQ,CAACsB,GAAG,CAACC,OAAO,CAACf,gBAAgB,EAAEJ,GAAG,EAAE;YAC1DgB,EAAE,EAAEA,EAAE;YACNI,IAAI,EAAExB,QAAQ,CAACwB,IAAI,CAACC,GAAG;YACvBC,OAAO,EAAE1B,QAAQ,CAAC2B,GAAG,CAACC;UAC1B,CAAC,CAAC;UAGF,IAAMC,YAAY,GAAG,IAAI,CAACC,oBAAoB,CAAC,CAAC;UAEhD,OAAO;YACHC,aAAa,EAAEV,SAAS,CAACW,QAAQ,CAAC,CAAC;YACnCtB,IAAI,EAAEA,IAAI,CAACsB,QAAQ,CAAC,CAAC;YACrBZ,EAAE,EAAEA,EAAE,CAACY,QAAQ,CAAC,CAAC;YACjBH,YAAY,EAAZA,YAAY;YACZI,SAAS,EAAE,aAAa;YACxBf,UAAU,EAAE,IAAI,CAACC,UAAU;YAC3BH,OAAO,EAAE,IAAI,CAACC,QAAQ;YACtBiB,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;UACtC,CAAC;QAEL,CAAC,CAAC,OAAOC,KAAK,EAAE;UACZC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;UACnD,MAAM,IAAIE,KAAK,CAAC,mBAAmB,CAAC;QACxC;MACJ,CAAC;MAAA,SA1CYC,eAAeA,CAAAC,EAAA,EAAAC,GAAA;QAAA,OAAApC,gBAAA,CAAAqC,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAfJ,eAAe;IAAA;EAAA;IAAApC,GAAA;IAAAC,KAAA;MAAA,IAAAwC,gBAAA,GAAAtC,iBAAA,CAkD5B,WACIwB,aAAgC,EAChCtB,YAAoB,EACL;QACf,IAAI;UAEA,IAAML,GAAG,GAAGJ,QAAQ,CAACe,MAAM,CAACN,YAAY,EAAEsB,aAAa,CAACrB,IAAI,EAAE;YAC1DM,OAAO,EAAEe,aAAa,CAACf,OAAO,GAAG,EAAE;YACnCE,UAAU,EAAEa,aAAa,CAACb;UAC9B,CAAC,CAAC;UAGF,IAAM4B,SAAS,GAAG9C,QAAQ,CAACsB,GAAG,CAACyB,OAAO,CAAChB,aAAa,CAACA,aAAa,EAAE3B,GAAG,EAAE;YACrEgB,EAAE,EAAEpB,QAAQ,CAACgD,GAAG,CAACC,GAAG,CAACC,KAAK,CAACnB,aAAa,CAACX,EAAE,CAAC;YAC5CI,IAAI,EAAExB,QAAQ,CAACwB,IAAI,CAACC,GAAG;YACvBC,OAAO,EAAE1B,QAAQ,CAAC2B,GAAG,CAACC;UAC1B,CAAC,CAAC;UAEF,IAAMpB,gBAAgB,GAAGsC,SAAS,CAACd,QAAQ,CAAChC,QAAQ,CAACgD,GAAG,CAACG,IAAI,CAAC;UAE9D,IAAI,CAAC3C,gBAAgB,EAAE;YACnB,MAAM,IAAI+B,KAAK,CAAC,oCAAoC,CAAC;UACzD;UAEA,OAAO/B,gBAAgB;QAE3B,CAAC,CAAC,OAAO6B,KAAK,EAAE;UACZC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;UACnD,MAAM,IAAIE,KAAK,CAAC,yCAAyC,CAAC;QAC9D;MACJ,CAAC;MAAA,SA9BYa,eAAeA,CAAAC,GAAA,EAAAC,GAAA;QAAA,OAAAT,gBAAA,CAAAF,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAfQ,eAAe;IAAA;EAAA;IAAAhD,GAAA;IAAAC,KAAA,EAoC5B,SAAOyB,oBAAoBA,CAAA,EAAW;MAClC,IAAMyB,SAAS,GAAG,CACd,SAAS,EAAE,SAAS,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,UAAU,EAC9E,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,UAAU,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,MAAM,EAC/E,UAAU,EAAE,SAAS,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAC5E,KAAK,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,QAAQ,CAC9E;MAED,IAAM1B,YAAY,GAAG,EAAE;MACvB,KAAK,IAAI2B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;QACzB,IAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAAC7C,MAAM,CAAC,CAAC,GAAG0C,SAAS,CAACK,MAAM,CAAC;QAChE/B,YAAY,CAACgC,IAAI,CAACN,SAAS,CAACE,WAAW,CAAC,CAAC;MAC7C;MAEA,OAAO5B,YAAY,CAACiC,IAAI,CAAC,GAAG,CAAC;IACjC;EAAC;IAAA1D,GAAA;IAAAC,KAAA,EAOD,SAAO0D,eAAeA,CAACC,QAAgB,EAAW;MAC9C,IAAI,CAACA,QAAQ,IAAI,OAAOA,QAAQ,KAAK,QAAQ,EAAE;QAC3C,OAAO,KAAK;MAChB;MAEA,IAAMC,KAAK,GAAGD,QAAQ,CAACE,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,KAAK,CAAC;MAG1C,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAACC,QAAQ,CAACH,KAAK,CAACL,MAAM,CAAC,EAAE;QAC9C,OAAO,KAAK;MAChB;MAGA,OAAOK,KAAK,CAACI,KAAK,CAAC,UAAAC,IAAI;QAAA,OACnBA,IAAI,IACJA,IAAI,CAACV,MAAM,GAAG,CAAC,IACf,UAAU,CAACW,IAAI,CAACD,IAAI,CAAC;MAAA,CACzB,CAAC;IACL;EAAC;IAAAlE,GAAA;IAAAC,KAAA,EAOD,SAAOmE,YAAYA,CAACR,QAAgB,EAAU;MAC1C,OAAOhE,QAAQ,CAACyE,MAAM,CAACT,QAAQ,CAAC,CAAChC,QAAQ,CAAC,CAAC;IAC/C;EAAC;IAAA5B,GAAA;IAAAC,KAAA,EAQD,SAAOqE,gBAAgBA,CAACC,SAAiB,EAAEC,SAAiB,EAAW;MACnE,IAAMC,KAAK,GAAG,IAAI,CAACL,YAAY,CAACG,SAAS,CAAC;MAC1C,IAAMG,KAAK,GAAG,IAAI,CAACN,YAAY,CAACI,SAAS,CAAC;MAC1C,OAAOC,KAAK,KAAKC,KAAK;IAC1B;EAAC;AAAA;AA9JQ7E,yBAAyB,CACVkB,UAAU,GAAG,MAAM;AADlClB,yBAAyB,CAEVgB,QAAQ,GAAG,GAAG;AAF7BhB,yBAAyB,CAGVa,SAAS,GAAG,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}