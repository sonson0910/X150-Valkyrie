{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { ErrorHandler, ErrorType, ErrorSeverity } from \"./ErrorHandler\";\nexport var ConfigurationService = function () {\n  function ConfigurationService() {\n    _classCallCheck(this, ConfigurationService);\n    this.isInitialized = false;\n    this.errorHandler = ErrorHandler.getInstance();\n    this.config = this.getDefaultConfiguration();\n  }\n  return _createClass(ConfigurationService, [{\n    key: \"initialize\",\n    value: (function () {\n      var _initialize = _asyncToGenerator(function* () {\n        try {\n          if (this.isInitialized) {\n            return true;\n          }\n          yield this.loadConfiguration();\n          this.validateConfiguration();\n          this.setupEnvironmentOverrides();\n          this.isInitialized = true;\n          console.log('Configuration service initialized successfully');\n          return true;\n        } catch (error) {\n          this.errorHandler.handleError(error, 'ConfigurationService.initialize', ErrorSeverity.HIGH, ErrorType.STORAGE);\n          return false;\n        }\n      });\n      function initialize() {\n        return _initialize.apply(this, arguments);\n      }\n      return initialize;\n    }())\n  }, {\n    key: \"getDefaultConfiguration\",\n    value: function getDefaultConfiguration() {\n      return {\n        network: {\n          mainnet: {\n            blockfrostProjectId: 'YOUR_MAINNET_PROJECT_ID',\n            cardanoscanApiKey: 'YOUR_CARDANOSCAN_API_KEY',\n            adastatApiKey: 'YOUR_ADASTAT_API_KEY'\n          },\n          testnet: {\n            blockfrostProjectId: 'YOUR_TESTNET_PROJECT_ID',\n            cardanoscanApiKey: 'YOUR_CARDANOSCAN_TESTNET_API_KEY',\n            adastatApiKey: 'YOUR_ADASTAT_TESTNET_API_KEY'\n          }\n        },\n        security: {\n          certificatePinning: {\n            enabled: true,\n            strictMode: true,\n            allowedDomains: ['api.blockfrost.io', 'cardanoscan.io', 'adastat.net']\n          },\n          biometricAuth: {\n            enabled: true,\n            fallbackToPasscode: true,\n            timeout: 30000\n          },\n          encryption: {\n            algorithm: 'AES-256',\n            keyDerivation: 'PBKDF2',\n            iterations: 100000\n          }\n        },\n        performance: {\n          cache: {\n            enabled: true,\n            defaultTTL: 30000,\n            maxSize: 100\n          },\n          monitoring: {\n            enabled: true,\n            slowOperationThreshold: 1000,\n            logLevel: 'info'\n          },\n          network: {\n            timeout: 10000,\n            retryAttempts: 3,\n            retryDelay: 1000\n          }\n        },\n        environment: 'development',\n        version: '1.0.0',\n        buildNumber: '1'\n      };\n    }\n  }, {\n    key: \"loadConfiguration\",\n    value: (function () {\n      var _loadConfiguration = _asyncToGenerator(function* () {\n        try {\n          var storedConfig = yield AsyncStorage.getItem('app_configuration');\n          if (storedConfig) {\n            var parsedConfig = JSON.parse(storedConfig);\n            this.config = _objectSpread(_objectSpread({}, this.config), parsedConfig);\n            console.log('Configuration loaded from storage');\n          } else {\n            console.log('No stored configuration found, using defaults');\n          }\n        } catch (error) {\n          console.warn('Failed to load configuration from storage:', error);\n        }\n      });\n      function loadConfiguration() {\n        return _loadConfiguration.apply(this, arguments);\n      }\n      return loadConfiguration;\n    }())\n  }, {\n    key: \"saveConfiguration\",\n    value: (function () {\n      var _saveConfiguration = _asyncToGenerator(function* () {\n        try {\n          yield AsyncStorage.setItem('app_configuration', JSON.stringify(this.config));\n          console.log('Configuration saved to storage');\n        } catch (error) {\n          this.errorHandler.handleError(error, 'ConfigurationService.saveConfiguration', ErrorSeverity.MEDIUM, ErrorType.STORAGE);\n        }\n      });\n      function saveConfiguration() {\n        return _saveConfiguration.apply(this, arguments);\n      }\n      return saveConfiguration;\n    }())\n  }, {\n    key: \"validateConfiguration\",\n    value: function validateConfiguration() {\n      try {\n        if (!this.config.network.mainnet.blockfrostProjectId || this.config.network.mainnet.blockfrostProjectId === 'YOUR_MAINNET_PROJECT_ID') {\n          console.warn('Mainnet Blockfrost project ID not configured');\n        }\n        if (!this.config.network.testnet.blockfrostProjectId || this.config.network.testnet.blockfrostProjectId === 'YOUR_TESTNET_PROJECT_ID') {\n          console.warn('Testnet Blockfrost project ID not configured');\n        }\n        if (this.config.security.certificatePinning.enabled && this.config.security.certificatePinning.allowedDomains.length === 0) {\n          console.warn('Certificate pinning enabled but no allowed domains configured');\n        }\n        if (this.config.performance.cache.maxSize <= 0) {\n          console.warn('Invalid cache max size, using default');\n          this.config.performance.cache.maxSize = 100;\n        }\n        console.log('Configuration validation completed');\n      } catch (error) {\n        console.error('Configuration validation failed:', error);\n      }\n    }\n  }, {\n    key: \"setupEnvironmentOverrides\",\n    value: function setupEnvironmentOverrides() {\n      try {\n        var env = this.config.environment;\n        switch (env) {\n          case 'development':\n            this.config.performance.monitoring.logLevel = 'debug';\n            this.config.performance.monitoring.enabled = true;\n            this.config.security.certificatePinning.strictMode = false;\n            break;\n          case 'staging':\n            this.config.performance.monitoring.logLevel = 'info';\n            this.config.performance.monitoring.enabled = true;\n            this.config.security.certificatePinning.strictMode = true;\n            break;\n          case 'production':\n            this.config.performance.monitoring.logLevel = 'warn';\n            this.config.performance.monitoring.enabled = true;\n            this.config.security.certificatePinning.strictMode = true;\n            this.config.security.biometricAuth.fallbackToPasscode = false;\n            break;\n        }\n        console.log(`Environment-specific configuration applied for: ${env}`);\n      } catch (error) {\n        console.error('Failed to setup environment overrides:', error);\n      }\n    }\n  }, {\n    key: \"getConfiguration\",\n    value: function getConfiguration() {\n      return _objectSpread({}, this.config);\n    }\n  }, {\n    key: \"getNetworkConfiguration\",\n    value: function getNetworkConfiguration() {\n      return _objectSpread({}, this.config.network);\n    }\n  }, {\n    key: \"getSecurityConfiguration\",\n    value: function getSecurityConfiguration() {\n      return _objectSpread({}, this.config.security);\n    }\n  }, {\n    key: \"getPerformanceConfiguration\",\n    value: function getPerformanceConfiguration() {\n      return _objectSpread({}, this.config.performance);\n    }\n  }, {\n    key: \"updateConfiguration\",\n    value: (function () {\n      var _updateConfiguration = _asyncToGenerator(function* (updates) {\n        try {\n          this.config = _objectSpread(_objectSpread({}, this.config), updates);\n          this.validateConfiguration();\n          yield this.saveConfiguration();\n          console.log('Configuration updated successfully');\n        } catch (error) {\n          this.errorHandler.handleError(error, 'ConfigurationService.updateConfiguration', ErrorSeverity.MEDIUM, ErrorType.STORAGE);\n          throw error;\n        }\n      });\n      function updateConfiguration(_x) {\n        return _updateConfiguration.apply(this, arguments);\n      }\n      return updateConfiguration;\n    }())\n  }, {\n    key: \"getApiKey\",\n    value: function getApiKey(service, network) {\n      try {\n        var networkConfig = this.config.network[network];\n        switch (service) {\n          case 'blockfrost':\n            return networkConfig.blockfrostProjectId;\n          case 'cardanoscan':\n            return networkConfig.cardanoscanApiKey;\n          case 'adastat':\n            return networkConfig.adastatApiKey;\n          default:\n            return undefined;\n        }\n      } catch (error) {\n        console.error(`Failed to get API key for ${service}:`, error);\n        return undefined;\n      }\n    }\n  }, {\n    key: \"setApiKey\",\n    value: (function () {\n      var _setApiKey = _asyncToGenerator(function* (service, network, apiKey) {\n        try {\n          var networkConfig = this.config.network[network];\n          switch (service) {\n            case 'blockfrost':\n              networkConfig.blockfrostProjectId = apiKey;\n              break;\n            case 'cardanoscan':\n              networkConfig.cardanoscanApiKey = apiKey;\n              break;\n            case 'adastat':\n              networkConfig.adastatApiKey = apiKey;\n              break;\n          }\n          yield this.saveConfiguration();\n          console.log(`API key updated for ${service} on ${network}`);\n        } catch (error) {\n          this.errorHandler.handleError(error, 'ConfigurationService.setApiKey', ErrorSeverity.MEDIUM, ErrorType.STORAGE);\n          throw error;\n        }\n      });\n      function setApiKey(_x2, _x3, _x4) {\n        return _setApiKey.apply(this, arguments);\n      }\n      return setApiKey;\n    }())\n  }, {\n    key: \"resetToDefaults\",\n    value: (function () {\n      var _resetToDefaults = _asyncToGenerator(function* () {\n        try {\n          this.config = this.getDefaultConfiguration();\n          yield this.saveConfiguration();\n          console.log('Configuration reset to defaults');\n        } catch (error) {\n          this.errorHandler.handleError(error, 'ConfigurationService.resetToDefaults', ErrorSeverity.MEDIUM, ErrorType.STORAGE);\n          throw error;\n        }\n      });\n      function resetToDefaults() {\n        return _resetToDefaults.apply(this, arguments);\n      }\n      return resetToDefaults;\n    }())\n  }, {\n    key: \"exportConfiguration\",\n    value: function exportConfiguration() {\n      try {\n        return JSON.stringify(this.config, null, 2);\n      } catch (error) {\n        console.error('Failed to export configuration:', error);\n        return '';\n      }\n    }\n  }, {\n    key: \"importConfiguration\",\n    value: (function () {\n      var _importConfiguration = _asyncToGenerator(function* (configJson) {\n        try {\n          var importedConfig = JSON.parse(configJson);\n          if (!this.isValidConfiguration(importedConfig)) {\n            throw new Error('Invalid configuration format');\n          }\n          this.config = _objectSpread(_objectSpread({}, this.config), importedConfig);\n          yield this.saveConfiguration();\n          console.log('Configuration imported successfully');\n          return true;\n        } catch (error) {\n          this.errorHandler.handleError(error, 'ConfigurationService.importConfiguration', ErrorSeverity.MEDIUM, ErrorType.STORAGE);\n          return false;\n        }\n      });\n      function importConfiguration(_x5) {\n        return _importConfiguration.apply(this, arguments);\n      }\n      return importConfiguration;\n    }())\n  }, {\n    key: \"isValidConfiguration\",\n    value: function isValidConfiguration(config) {\n      try {\n        return config && typeof config === 'object' && config.network && config.security && config.performance && config.environment && config.version;\n      } catch (error) {\n        return false;\n      }\n    }\n  }, {\n    key: \"getConfigurationStats\",\n    value: function getConfigurationStats() {\n      try {\n        var networkConfig = this.config.network;\n        var securityConfig = this.config.security;\n        var performanceConfig = this.config.performance;\n        var configuredApis = [networkConfig.mainnet.blockfrostProjectId, networkConfig.mainnet.cardanoscanApiKey, networkConfig.mainnet.adastatApiKey, networkConfig.testnet.blockfrostProjectId, networkConfig.testnet.cardanoscanApiKey, networkConfig.testnet.adastatApiKey].filter(function (key) {\n          return key && key !== 'YOUR_MAINNET_PROJECT_ID' && key !== 'YOUR_TESTNET_PROJECT_ID';\n        }).length;\n        var securityFeatures = [securityConfig.certificatePinning.enabled, securityConfig.biometricAuth.enabled, securityConfig.encryption.algorithm !== 'AES-256'].filter(Boolean).length;\n        var performanceSettings = [performanceConfig.cache.enabled, performanceConfig.monitoring.enabled, performanceConfig.network.timeout !== 10000].filter(Boolean).length;\n        return {\n          totalSettings: Object.keys(this.config).length,\n          configuredApis: configuredApis,\n          securityFeatures: securityFeatures,\n          performanceSettings: performanceSettings\n        };\n      } catch (error) {\n        console.error('Failed to get configuration stats:', error);\n        return {\n          totalSettings: 0,\n          configuredApis: 0,\n          securityFeatures: 0,\n          performanceSettings: 0\n        };\n      }\n    }\n  }, {\n    key: \"getSetting\",\n    value: function getSetting(key) {\n      return this.config[key];\n    }\n  }, {\n    key: \"setSetting\",\n    value: function setSetting(key, value) {\n      this.config[key] = value;\n      this.saveConfiguration();\n    }\n  }, {\n    key: \"getSecuritySetting\",\n    value: function getSecuritySetting(key) {\n      return this.config.security[key];\n    }\n  }, {\n    key: \"setSecuritySetting\",\n    value: function setSecuritySetting(key, value) {\n      this.config.security[key] = value;\n      this.saveConfiguration();\n    }\n  }], [{\n    key: \"getInstance\",\n    value: function getInstance() {\n      if (!ConfigurationService.instance) {\n        ConfigurationService.instance = new ConfigurationService();\n      }\n      return ConfigurationService.instance;\n    }\n  }]);\n}();","map":{"version":3,"names":["AsyncStorage","ErrorHandler","ErrorType","ErrorSeverity","ConfigurationService","_classCallCheck","isInitialized","errorHandler","getInstance","config","getDefaultConfiguration","_createClass","key","value","_initialize","_asyncToGenerator","loadConfiguration","validateConfiguration","setupEnvironmentOverrides","console","log","error","handleError","HIGH","STORAGE","initialize","apply","arguments","network","mainnet","blockfrostProjectId","cardanoscanApiKey","adastatApiKey","testnet","security","certificatePinning","enabled","strictMode","allowedDomains","biometricAuth","fallbackToPasscode","timeout","encryption","algorithm","keyDerivation","iterations","performance","cache","defaultTTL","maxSize","monitoring","slowOperationThreshold","logLevel","retryAttempts","retryDelay","environment","version","buildNumber","_loadConfiguration","storedConfig","getItem","parsedConfig","JSON","parse","_objectSpread","warn","_saveConfiguration","setItem","stringify","MEDIUM","saveConfiguration","length","env","getConfiguration","getNetworkConfiguration","getSecurityConfiguration","getPerformanceConfiguration","_updateConfiguration","updates","updateConfiguration","_x","getApiKey","service","networkConfig","undefined","_setApiKey","apiKey","setApiKey","_x2","_x3","_x4","_resetToDefaults","resetToDefaults","exportConfiguration","_importConfiguration","configJson","importedConfig","isValidConfiguration","Error","importConfiguration","_x5","getConfigurationStats","securityConfig","performanceConfig","configuredApis","filter","securityFeatures","Boolean","performanceSettings","totalSettings","Object","keys","getSetting","setSetting","getSecuritySetting","setSecuritySetting","instance"],"sources":["/Users/sonson/Documents/code/venera/X150-Valkyrie/src/services/ConfigurationService.ts"],"sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage';\nimport { ErrorHandler, ErrorType, ErrorSeverity } from './ErrorHandler';\n\nexport interface NetworkConfiguration {\n    mainnet: {\n        blockfrostProjectId: string;\n        cardanoscanApiKey?: string;\n        adastatApiKey?: string;\n    };\n    testnet: {\n        blockfrostProjectId: string;\n        cardanoscanApiKey?: string;\n        adastatApiKey?: string;\n    };\n}\n\nexport interface SecurityConfiguration {\n    certificatePinning: {\n        enabled: boolean;\n        strictMode: boolean;\n        allowedDomains: string[];\n    };\n    biometricAuth: {\n        enabled: boolean;\n        fallbackToPasscode: boolean;\n        timeout: number;\n    };\n    encryption: {\n        algorithm: 'AES-256' | 'ChaCha20';\n        keyDerivation: 'PBKDF2' | 'Argon2';\n        iterations: number;\n    };\n}\n\nexport interface PerformanceConfiguration {\n    cache: {\n        enabled: boolean;\n        defaultTTL: number;\n        maxSize: number;\n    };\n    monitoring: {\n        enabled: boolean;\n        slowOperationThreshold: number;\n        logLevel: 'debug' | 'info' | 'warn' | 'error';\n    };\n    network: {\n        timeout: number;\n        retryAttempts: number;\n        retryDelay: number;\n    };\n}\n\nexport interface AppConfiguration {\n    network: NetworkConfiguration;\n    security: SecurityConfiguration;\n    performance: PerformanceConfiguration;\n    environment: 'development' | 'staging' | 'production';\n    version: string;\n    buildNumber: string;\n}\n\nexport class ConfigurationService {\n    private static instance: ConfigurationService;\n    private config: AppConfiguration;\n    private errorHandler: ErrorHandler;\n    private isInitialized = false;\n\n    static getInstance(): ConfigurationService {\n        if (!ConfigurationService.instance) {\n            ConfigurationService.instance = new ConfigurationService();\n        }\n        return ConfigurationService.instance;\n    }\n\n    constructor() {\n        this.errorHandler = ErrorHandler.getInstance();\n        this.config = this.getDefaultConfiguration();\n    }\n\n    /**\n     * Initialize configuration service\n     */\n    async initialize(): Promise<boolean> {\n        try {\n            if (this.isInitialized) {\n                return true;\n            }\n\n            // Load configuration from storage\n            await this.loadConfiguration();\n\n            // Validate configuration\n            this.validateConfiguration();\n\n            // Set up environment-specific overrides\n            this.setupEnvironmentOverrides();\n\n            this.isInitialized = true;\n            console.log('Configuration service initialized successfully');\n\n            return true;\n        } catch (error) {\n            this.errorHandler.handleError(\n                error as Error,\n                'ConfigurationService.initialize',\n                ErrorSeverity.HIGH,\n                ErrorType.STORAGE\n            );\n            return false;\n        }\n    }\n\n    /**\n     * Get default configuration\n     */\n    private getDefaultConfiguration(): AppConfiguration {\n        return {\n            network: {\n                mainnet: {\n                    blockfrostProjectId: 'YOUR_MAINNET_PROJECT_ID',\n                    cardanoscanApiKey: 'YOUR_CARDANOSCAN_API_KEY',\n                    adastatApiKey: 'YOUR_ADASTAT_API_KEY'\n                },\n                testnet: {\n                    blockfrostProjectId: 'YOUR_TESTNET_PROJECT_ID',\n                    cardanoscanApiKey: 'YOUR_CARDANOSCAN_TESTNET_API_KEY',\n                    adastatApiKey: 'YOUR_ADASTAT_TESTNET_API_KEY'\n                }\n            },\n            security: {\n                certificatePinning: {\n                    enabled: true,\n                    strictMode: true,\n                    allowedDomains: ['api.blockfrost.io', 'cardanoscan.io', 'adastat.net']\n                },\n                biometricAuth: {\n                    enabled: true,\n                    fallbackToPasscode: true,\n                    timeout: 30000\n                },\n                encryption: {\n                    algorithm: 'AES-256',\n                    keyDerivation: 'PBKDF2',\n                    iterations: 100000\n                }\n            },\n            performance: {\n                cache: {\n                    enabled: true,\n                    defaultTTL: 30000,\n                    maxSize: 100\n                },\n                monitoring: {\n                    enabled: true,\n                    slowOperationThreshold: 1000,\n                    logLevel: 'info'\n                },\n                network: {\n                    timeout: 10000,\n                    retryAttempts: 3,\n                    retryDelay: 1000\n                }\n            },\n            environment: 'development',\n            version: '1.0.0',\n            buildNumber: '1'\n        };\n    }\n\n    /**\n     * Load configuration from storage\n     */\n    private async loadConfiguration(): Promise<void> {\n        try {\n            const storedConfig = await AsyncStorage.getItem('app_configuration');\n\n            if (storedConfig) {\n                const parsedConfig = JSON.parse(storedConfig);\n                this.config = { ...this.config, ...parsedConfig };\n                console.log('Configuration loaded from storage');\n            } else {\n                console.log('No stored configuration found, using defaults');\n            }\n        } catch (error) {\n            console.warn('Failed to load configuration from storage:', error);\n            // Continue with default configuration\n        }\n    }\n\n    /**\n     * Save configuration to storage\n     */\n    async saveConfiguration(): Promise<void> {\n        try {\n            await AsyncStorage.setItem('app_configuration', JSON.stringify(this.config));\n            console.log('Configuration saved to storage');\n        } catch (error) {\n            this.errorHandler.handleError(\n                error as Error,\n                'ConfigurationService.saveConfiguration',\n                ErrorSeverity.MEDIUM,\n                ErrorType.STORAGE\n            );\n        }\n    }\n\n    /**\n     * Validate configuration\n     */\n    private validateConfiguration(): void {\n        try {\n            // Validate required fields\n            if (!this.config.network.mainnet.blockfrostProjectId ||\n                this.config.network.mainnet.blockfrostProjectId === 'YOUR_MAINNET_PROJECT_ID') {\n                console.warn('Mainnet Blockfrost project ID not configured');\n            }\n\n            if (!this.config.network.testnet.blockfrostProjectId ||\n                this.config.network.testnet.blockfrostProjectId === 'YOUR_TESTNET_PROJECT_ID') {\n                console.warn('Testnet Blockfrost project ID not configured');\n            }\n\n            // Validate security settings\n            if (this.config.security.certificatePinning.enabled &&\n                this.config.security.certificatePinning.allowedDomains.length === 0) {\n                console.warn('Certificate pinning enabled but no allowed domains configured');\n            }\n\n            // Validate performance settings\n            if (this.config.performance.cache.maxSize <= 0) {\n                console.warn('Invalid cache max size, using default');\n                this.config.performance.cache.maxSize = 100;\n            }\n\n            console.log('Configuration validation completed');\n        } catch (error) {\n            console.error('Configuration validation failed:', error);\n        }\n    }\n\n    /**\n     * Setup environment-specific overrides\n     */\n    private setupEnvironmentOverrides(): void {\n        try {\n            const env = this.config.environment;\n\n            switch (env) {\n                case 'development':\n                    this.config.performance.monitoring.logLevel = 'debug';\n                    this.config.performance.monitoring.enabled = true;\n                    this.config.security.certificatePinning.strictMode = false;\n                    break;\n\n                case 'staging':\n                    this.config.performance.monitoring.logLevel = 'info';\n                    this.config.performance.monitoring.enabled = true;\n                    this.config.security.certificatePinning.strictMode = true;\n                    break;\n\n                case 'production':\n                    this.config.performance.monitoring.logLevel = 'warn';\n                    this.config.performance.monitoring.enabled = true;\n                    this.config.security.certificatePinning.strictMode = true;\n                    this.config.security.biometricAuth.fallbackToPasscode = false;\n                    break;\n            }\n\n            console.log(`Environment-specific configuration applied for: ${env}`);\n        } catch (error) {\n            console.error('Failed to setup environment overrides:', error);\n        }\n    }\n\n    /**\n     * Get configuration\n     */\n    getConfiguration(): AppConfiguration {\n        return { ...this.config };\n    }\n\n    /**\n     * Get network configuration\n     */\n    getNetworkConfiguration(): NetworkConfiguration {\n        return { ...this.config.network };\n    }\n\n    /**\n     * Get security configuration\n     */\n    getSecurityConfiguration(): SecurityConfiguration {\n        return { ...this.config.security };\n    }\n\n    /**\n     * Get performance configuration\n     */\n    getPerformanceConfiguration(): PerformanceConfiguration {\n        return { ...this.config.performance };\n    }\n\n    /**\n     * Update configuration\n     */\n    async updateConfiguration(updates: Partial<AppConfiguration>): Promise<void> {\n        try {\n            this.config = { ...this.config, ...updates };\n\n            // Re-validate after updates\n            this.validateConfiguration();\n\n            // Save to storage\n            await this.saveConfiguration();\n\n            console.log('Configuration updated successfully');\n        } catch (error) {\n            this.errorHandler.handleError(\n                error as Error,\n                'ConfigurationService.updateConfiguration',\n                ErrorSeverity.MEDIUM,\n                ErrorType.STORAGE\n            );\n            throw error;\n        }\n    }\n\n    /**\n     * Get API key for service\n     */\n    getApiKey(service: 'blockfrost' | 'cardanoscan' | 'adastat', network: 'mainnet' | 'testnet'): string | undefined {\n        try {\n            const networkConfig = this.config.network[network];\n\n            switch (service) {\n                case 'blockfrost':\n                    return networkConfig.blockfrostProjectId;\n                case 'cardanoscan':\n                    return networkConfig.cardanoscanApiKey;\n                case 'adastat':\n                    return networkConfig.adastatApiKey;\n                default:\n                    return undefined;\n            }\n        } catch (error) {\n            console.error(`Failed to get API key for ${service}:`, error);\n            return undefined;\n        }\n    }\n\n    /**\n     * Set API key for service\n     */\n    async setApiKey(service: 'blockfrost' | 'cardanoscan' | 'adastat', network: 'mainnet' | 'testnet', apiKey: string): Promise<void> {\n        try {\n            const networkConfig = this.config.network[network];\n\n            switch (service) {\n                case 'blockfrost':\n                    networkConfig.blockfrostProjectId = apiKey;\n                    break;\n                case 'cardanoscan':\n                    networkConfig.cardanoscanApiKey = apiKey;\n                    break;\n                case 'adastat':\n                    networkConfig.adastatApiKey = apiKey;\n                    break;\n            }\n\n            await this.saveConfiguration();\n            console.log(`API key updated for ${service} on ${network}`);\n        } catch (error) {\n            this.errorHandler.handleError(\n                error as Error,\n                'ConfigurationService.setApiKey',\n                ErrorSeverity.MEDIUM,\n                ErrorType.STORAGE\n            );\n            throw error;\n        }\n    }\n\n    /**\n     * Reset configuration to defaults\n     */\n    async resetToDefaults(): Promise<void> {\n        try {\n            this.config = this.getDefaultConfiguration();\n            await this.saveConfiguration();\n            console.log('Configuration reset to defaults');\n        } catch (error) {\n            this.errorHandler.handleError(\n                error as Error,\n                'ConfigurationService.resetToDefaults',\n                ErrorSeverity.MEDIUM,\n                ErrorType.STORAGE\n            );\n            throw error;\n        }\n    }\n\n    /**\n     * Export configuration\n     */\n    exportConfiguration(): string {\n        try {\n            return JSON.stringify(this.config, null, 2);\n        } catch (error) {\n            console.error('Failed to export configuration:', error);\n            return '';\n        }\n    }\n\n    /**\n     * Import configuration\n     */\n    async importConfiguration(configJson: string): Promise<boolean> {\n        try {\n            const importedConfig = JSON.parse(configJson);\n\n            // Validate imported configuration\n            if (!this.isValidConfiguration(importedConfig)) {\n                throw new Error('Invalid configuration format');\n            }\n\n            this.config = { ...this.config, ...importedConfig };\n            await this.saveConfiguration();\n\n            console.log('Configuration imported successfully');\n            return true;\n        } catch (error) {\n            this.errorHandler.handleError(\n                error as Error,\n                'ConfigurationService.importConfiguration',\n                ErrorSeverity.MEDIUM,\n                ErrorType.STORAGE\n            );\n            return false;\n        }\n    }\n\n    /**\n     * Validate configuration format\n     */\n    private isValidConfiguration(config: any): boolean {\n        try {\n            // Basic validation\n            return config &&\n                typeof config === 'object' &&\n                config.network &&\n                config.security &&\n                config.performance &&\n                config.environment &&\n                config.version;\n        } catch (error) {\n            return false;\n        }\n    }\n\n    /**\n     * Get configuration statistics\n     */\n    getConfigurationStats(): {\n        totalSettings: number;\n        configuredApis: number;\n        securityFeatures: number;\n        performanceSettings: number;\n    } {\n        try {\n            const networkConfig = this.config.network;\n            const securityConfig = this.config.security;\n            const performanceConfig = this.config.performance;\n\n            const configuredApis = [\n                networkConfig.mainnet.blockfrostProjectId,\n                networkConfig.mainnet.cardanoscanApiKey,\n                networkConfig.mainnet.adastatApiKey,\n                networkConfig.testnet.blockfrostProjectId,\n                networkConfig.testnet.cardanoscanApiKey,\n                networkConfig.testnet.adastatApiKey\n            ].filter(key => key && key !== 'YOUR_MAINNET_PROJECT_ID' && key !== 'YOUR_TESTNET_PROJECT_ID').length;\n\n            const securityFeatures = [\n                securityConfig.certificatePinning.enabled,\n                securityConfig.biometricAuth.enabled,\n                securityConfig.encryption.algorithm !== 'AES-256'\n            ].filter(Boolean).length;\n\n            const performanceSettings = [\n                performanceConfig.cache.enabled,\n                performanceConfig.monitoring.enabled,\n                performanceConfig.network.timeout !== 10000\n            ].filter(Boolean).length;\n\n            return {\n                totalSettings: Object.keys(this.config).length,\n                configuredApis: configuredApis,\n                securityFeatures: securityFeatures,\n                performanceSettings: performanceSettings\n            };\n        } catch (error) {\n            console.error('Failed to get configuration stats:', error);\n            return {\n                totalSettings: 0,\n                configuredApis: 0,\n                securityFeatures: 0,\n                performanceSettings: 0\n            };\n        }\n    }\n\n    /**\n     * Lấy setting theo key\n     */\n    getSetting(key: string): any {\n        return (this.config as any)[key];\n    }\n\n    /**\n     * Set setting theo key\n     */\n    setSetting(key: string, value: any): void {\n        (this.config as any)[key] = value;\n        this.saveConfiguration();\n    }\n\n    /**\n     * Lấy security setting\n     */\n    getSecuritySetting(key: string): any {\n        return (this.config.security as any)[key];\n    }\n\n    /**\n     * Set security setting\n     */\n    setSecuritySetting(key: string, value: any): void {\n        (this.config.security as any)[key] = value;\n        this.saveConfiguration();\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}